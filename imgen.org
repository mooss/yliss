#+title: Image generation tools

#+property: header-args:python :results output :noweb no-export
#+property: header-args:cpp :flags -std=c++20 -I include -lGL -lOSMesa src/glad.c :eval never :main no :exports both :noweb no-export
#+property: header-args:bash :noweb no-export :prologue "exec 2>&1" :epilogue "true"

* Prelude

** Inclusion

The following script uses LitLib's =include.pl= to fetch code blocks defined in =Yliss= and =LitLib=, along with their dependencies.
Most of the work to generate images is defined in in those other documents, the current document merely assembles a few primitives.

#+name: include
#+begin_src sh :var args="" :results output :wrap src cpp :eval no-export
./litlib/include.pl 'window.org litlib/cpp.org graphics.org imgen.org' "$args"
#+end_src


* Image specification (=imgspec=)

Gathers all the information needed to generate an image, with reasonable defaults for the vertex and fragment shaders.

#+name: imgspec
#+begin_src cpp
struct imgspec {
    const char *vs =
        "#version 330 core\n"
        "layout (location = 0) in vec2 position;\n"
        "layout (location = 1) in vec3 color_in;\n"
        "out vec3 color_fs;\n"
        "\n"
        "uniform mat4 model;\n"
        "uniform mat4 view;\n"
        "uniform mat4 projection;\n"
        "\n"
        "void main() {\n"
        "    gl_Position = projection * view * model * vec4(position, 0.0f, 1.0f);\n"
        "    color_fs = color_in;\n"
        "}\n";
    const char *fs =
        "#version 330 core\n"
        "out vec4 color_out;\n"
        "in vec3 color_fs;\n"
        "\n"
        "void main() {\n"
        "    color_out = vec4(color_fs, 1.);\n"
        "}\n";
    const std::vector<float>& vtx;
    const std::vector<unsigned int>& layout;
    const std::vector<unsigned int>& idx;
    orthographic_projection proj{.left = 0, .right = 1, .bottom = 0, .top = 1};
    mandatory<unsigned int> width;
    mandatory<unsigned int> height;

    <<imgspec/public>>
};
#+end_src
#+depends:imgspec :noweb mandatory moviort gl_context shader_program VAO vertices indexes transform gl_screen_one image/format/deduce :cpp vector string_view

The =gen= method can generate an image under the given path by creating an OpenGL context and rendering one frame using the information contained in the =imgspec=.

#+begin_src cpp :eval no-export :exports both :noweb-ref imgspec/public
void gen(std::string_view destination) {
    gl_context offscreen(*width, *height);
    glClearColor(.5f, .5f, .5f, 0.0f);
    shader_program shader{vertex_shader(vs), fragment_shader(fs)};
    VAO vao{};
    vertices<GLfloat> vtxobj(vtx, layout);
    indexes idxobj(idx);
    moviort viper(
        transform(),
        transform().translate({0, 0, -1}), // Move the view otherwise it would get clipped by the near value.
        proj,
        shader
    );

    auto render = [&]{
        shader.use();
        vao.bind();
        idxobj.draw();
    };
    using writer = image::format::deduce<90>::writer<identity>;
    gl_screen_one(offscreen, destination, writer(), render);
}
#+end_src

** Usage

#+begin_src cpp :eval no-export :exports both
<<include(":noweb imgspec")>>

int main() {
    imgspec{
        .vtx = { // Positions // Colors
                    1, 1,        1, 1, 0,  // Top right,    yellow.
                    0, 1,        1, 0, 1,  // Top left,     magenta.
                    1, 0,        0, 1, 1,  // Bottom right, cyan.
                    0, 0,        0, 0, 0}, // Bottom left,  black.
        .layout = { 2, 3 },
        .idx = { 0, 1, 2,
                 1, 2, 3 },
        .width = 64, .height = 64
    }.gen("images/imgen/usage.png");
    return 0;
}
#+end_src

#+RESULTS:
:results:
[[file:images/imgen/usage.png]]
:end:


** Command-line tool

The goal is to write a tool able to read this kind of image specification format:
#+begin_src txt :tangle tangle/usage.imgspec
1 1 1 1 0
0 1 1 0 1
1 0 0 1 1
0 0 0 0 0

2 3

0 1 2
1 2 3

64 64
#+end_src

This format is composed of 4 section separated by empty lines:
 1. The vertices.
 2. The layout.
 3. The indexes.
 4. The size of the generated image.

*** Implementation

#+name: imgen-cli
#+begin_src cpp
bool is_space(char c) {
    return c == ' ' || c == '\n';
}

bool not_spaces(const std::string_view str) {
    for(auto c: str)
        if(!is_space(c)) return true;
    return false;
}

int main(int argc, char *argv[]) {
    if(argc != 3) {
        panic("expected 2 arguments, got " + std::to_string(argc-1));
    }
    auto spec = argv[1];
    auto dest = argv[2];

    auto cleansplit = [](const auto& range, auto splitter) {
        auto res = split(range, splitter);
        keepin(not_spaces, res);
        return res;
    };

    auto raw = slurp(spec); // TODO: ensure it exists.
    auto splitted = cleansplit(raw, "\n\n");

    if(splitted.size() != 4) {
        std::string err = "expected 4 sections to imgspec file but got ";
        panic(err + std::to_string(splitted.size()));
    }

    auto parse = [&](auto i, auto convert) {
        return mapassert(convert, cleansplit(splitted[i], greedy_finder(is_space)));
    };

    auto vertices = parse(0, to_float);
    auto layout = parse(1, to_uint);
    auto indexes = parse(2, to_uint);
    auto imsize = parse(3, to_uint);

    if(imsize.size() != 2) {
        panic(std::string("expected image size section to be 2 uint, got") + std::to_string(imsize.size()));
    }

    imgspec{
        .vtx = vertices,
        .layout = layout,
        .idx = indexes,
        .width = imsize[0],
        .height = imsize[1],
    }.gen(dest);

    return 0;
}
#+end_src
#+depends:imgen-cli :noweb panic slurp split/sv keepin mapassert greedy_finder to-numbers imgspec :cpp string string_view

*** Compilation

This compiles =imgen= into =./bin=:
#+begin_src bash :wrap src compilation
mkdir -p bin
tangled=tangle/imgen.cpp
./litlib/include.pl 'window.org litlib/cpp.org graphics.org imgen.org' ':noweb imgen-cli' > $tangled
g++ -Wall -std=c++20 -O2 -I include -lGL -lOSMesa src/glad.c $tangled -o bin/imgen
du -sh bin/imgen
wc -l $tangled
rm $tangled
#+end_src

#+RESULTS:
#+begin_src compilation
In file included from tangle/imgen.cpp:612:
include/stb/stb_image_write.h: In function ‘void stbiw__write1(stbi__write_context*, unsigned char)’:
include/stb/stb_image_write.h:400:24: warning: comparison of integer expressions of different signedness: ‘int’ and ‘long unsigned int’ [-Wsign-compare]
  400 |    if (s->buf_used + 1 > sizeof(s->buffer))
      |        ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
include/stb/stb_image_write.h: In function ‘void stbiw__write3(stbi__write_context*, unsigned char, unsigned char, unsigned char)’:
include/stb/stb_image_write.h:408:24: warning: comparison of integer expressions of different signedness: ‘int’ and ‘long unsigned int’ [-Wsign-compare]
  408 |    if (s->buf_used + 3 > sizeof(s->buffer))
      |        ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
196K	bin/imgen
830 tangle/imgen.cpp
#+end_src

*** Code block

#+name: imgen
#+begin_src bash :var spec="" dest=""
[[ -f "$spec" ]] || { echo "Specification file \`$spec\` does not exist."; exit; }
mkdir -p "$(dirname "$dest")"
./bin/imgen "$spec" "$dest"
#+end_src

#+call: imgen("tangle/usage.imgspec", "images/imgen/usage.png")

#+RESULTS:
:results:
[[file:images/imgen/usage.png]]
:end:


* Image specification generation (=pymgen=)

The idea is to use an expressive language with fast compilation or fast enough interpretation to quickly output image specifications.
This implementation is based on Python and is called =pymgen=.

The proper implementation is splitted into three parts:
 1. *Primitives* not directly related to image generation.
 2. *Generation* of the imgspec data.
 3. *Definition* of the image to generate.

Two additional sections, *Code blocks* and *Usage* are appended at the end to set up code blocks and to show =pymgen= in action.

** Primitives

=enumerator= automatically associates an increasing number to the keys that have not been defined yet.
It can be seen as an handy way to associate a numerical index to potentially duplicated data points.
#+name: enumerator
#+begin_src python
class enumerator(dict):
    def __init__(self):
        self.i = 0
    def __getitem__(self, key):
        if key in self:
            return super().__getitem__(key)
        self[key] = self.i
        self.i += 1
        return self.i - 1
#+end_src

Usage:
#+begin_src python
<<include(":noweb enumerator")>>
lost = enumerator()
indexes = [lost[i] for i in (4, 8, 15, 16, 23, 42, 16, 16, 16, 42, 108)]
print(indexes)
print(lost)
#+end_src

#+RESULTS:
:results:
[0, 1, 2, 3, 4, 5, 3, 3, 3, 5, 6]
{4: 0, 8: 1, 15: 2, 16: 3, 23: 4, 42: 5, 108: 6}
:end:


** Generation

Generation is mainly concerned with two things:
 1. Ensuring that the initial definition is correct.
 2. Transforming this definition to a textual specification.

*** Vertices

Vertices can be defined with the =vertex= class.
The main design principle is to not bother with error checking.
If there is an error, execution is immediately stopped.

#+begin_src python :noweb-ref pymgen
class vertex:
    def __init__(self, *spec):
        def assert5():
            s = tuple(spec)
            if len(spec) == 1:
                s = spec[0]
            if len(s) == 2:
                return list(s) + [0, 0, 0] # Black.
            assert len(s) == 5, f"invalid vertex spec `{s}`"
            return s

        spec = assert5()
        self.x, self.y, self.r, self.g, self.b = spec

    def __repr__(self):
        return ' '.join(map(str, (self.x, self.y, self.r, self.g, self.b)))
#+end_src


** Assembly of vertices

This is the last step of imgspec generation, instantiating the raw vertices into text.
The raw vertices are manipulated as triangles defined as sequences of vertices.
=triangle='s role is to assert that its argument is indeed a sequence of 3 vertices (ultimately relying on =vertex= to do so).

#+begin_src python :noweb-ref pymgen
def vstr(*spec):
    return str(vertex(*spec))

def triangle(spec):
    assert len(spec) == 3, f'invalid triangle spec {spec}'
    return tuple(map(vstr, spec))
#+end_src

The ultimate function of this image specification generator takes a sequence of triangles and turns it into
#+begin_src python :noweb-ref pymgen
def imgspec(triangles, width, height):
    indexes = list()
    vertices = enumerator()
    for tri in triangles:
        idxstr = ' '.join(str(vertices[vtx]) for vtx in triangle(tri))
        indexes.append(idxstr)
    print('\n'.join(vertices.keys()))
    print()
    print(2, 3)
    print()
    print('\n'.join(indexes))
    print()
    print(width, height)
#+end_src
#+depends:pymgen :noweb enumerator


** Definition

This part is concerned with setting up primitives to help defining and combining geometric shapes.

*** Predefined constants

Positions:
#+begin_src python :noweb-ref pymgen
lt = left_top      = (0,   1)
rt = right_top     = (1,   1)
lb = left_bottom   = (0,   0)
rb = right_bottom  = (1,   0)
mt = middle_top    = (0.5, 1)
mb = middle_bottom = (0.5, 0)
lm = left_middle   = (0,   0.5)
rm = right_middle  = (1,   0.5)
#+end_src

Colors:
#+begin_src python :noweb-ref pymgen
r = red     = (1, 0, 0)
g = green   = (0, 1, 0)
b = blue    = (0, 0, 1)
c = cyan    = (0, 1, 1)
m = magenta = (1, 0, 1)
y = yellow  = (1, 1, 0)
k = black   = (0, 0, 0)
w = white   = (1, 1, 1)
#+end_src

*** Vertex manipulation

A =quad= is made of two triangles:
#+begin_src python :noweb-ref pymgen
def quad(a, b, c,  d):
    return [(a, b, c), (b, c, d)]
#+end_src

A =line= is also represented as two triangles, except that it is only defined as two points and a $width$.

Its implementation is more complex because each of the two initial points must splitted in two new points in order to generate a line with a width.
The position of those new points is computed by shifting them towards each of the normal directions by an amount of $width / 2$, thus making the distance between them equal to $width$.

#+begin_src python :noweb-ref pymgen
import math
def line(a, b, width=.01):
    # Compute the tangent components (that once flipped become the normal components).
    dx = (b[0] - a[0])
    dy = (b[1] - a[1])
    # Apply the width:
    width = width / (2 * math.sqrt(dx * dx + dy * dy))
    dx *= width
    dy *= width
    # Shift the points.
    a1, a2, b1, b2 = list(a), list(a), list(b), list(b)
    a1[0] -= dy; a1[1] += dx; a2[0] += dy; a2[1] -= dx
    b1[0] -= dy; b1[1] += dx; b2[0] += dy; b2[1] -= dx
    return [(a1, a2, b1), (a2, b1, b2)]
#+end_src


** Code blocks

This Python one-liner is =pymgen='s equivalent of the colorful square specification, which is for now the only image that has been generated:
#+name: usage
#+begin_src python
imgspec(quad(rt + y, lt + m, rb + c, lb + k), 64, 64)
#+end_src

*** Display an image spec

This is just a matter of using =LitLib='s =include.pl= to fetch the given code block, with the added =pymgen= dependency and to execute it with Python.

#+name: spec
#+begin_src bash :var definition="" :wrap example
./litlib/include.pl imgen.org ":noweb pymgen $definition" | python
#+end_src

#+call: spec("usage")

#+RESULTS:
#+begin_example
1 1 1 1 0
0 1 1 0 1
1 0 0 1 1
0 0 0 0 0

2 3

0 1 2
1 2 3

64 64
#+end_example

*** Generate the image

This is basically the same thing, except that the image is also forwarded to the =imgen= binary.
#+name: py
#+begin_src bash :var definition="" destination=""
[[ -n "$definition" ]] || { echo "A definition code block is required."; exit; }
if [[ -z "$destination" ]]; then
    destination="images/imgen/$definition.png"
fi
mkdir -p "$(dirname "$dest")"
./litlib/include.pl imgen.org ":noweb pymgen $definition" | python > removeme.imspec
./bin/imgen removeme.imspec "$destination"
rm removeme.imspec
#+end_src

#+call: py("usage")

#+RESULTS:
:results:
[[file:images/imgen/usage.png]]
:end:


** Usage

*** Colorful square, with added line

This is the same basic example, but with an additional line going from the left-bottom point to the right-top one.
Also the width of this image is doubled to 128.

#+name: colorful-square+line
#+begin_src python
imgspec(quad(rt + y, lt + m, rb + c, lb + k) + line(lb, rt, .1), 128, 64)
#+end_src
#+call: py("colorful-square+line")

#+RESULTS:
:results:
[[file:images/imgen/colorful-square+line.png]]
:end:

Here is what the spec looks like[fn::The line vertices are very easy to spot.]:
#+call: spec("colorful-square+line")

#+RESULTS:
#+begin_example
1 1 1 1 0
0 1 1 0 1
1 0 0 1 1
0 0 0 0 0
-0.035355339059327376 0.035355339059327376 0 0 0
0.035355339059327376 -0.035355339059327376 0 0 0
0.9646446609406726 1.0353553390593273 0 0 0
1.0353553390593273 0.9646446609406726 0 0 0

2 3

0 1 2
1 2 3
4 5 6
5 6 7

128 64
#+end_example

*** A less trivial example, Sierpiński triangle

Constructing the coordinates of a Sierpiński triangle is a matter of recursing through each subtriangle, this is done in =sierec=.
Those subtriangles are themselves constructed using midpoints computed with the =mid= function.
#+begin_src python :noweb-ref sierpiński
def mid(l, r):
    return (l[0] + r[0]) / 2, (l[1] + r[1]) / 2
def sierec(a, b, c, n=1):
    if n <= 0: return [(a, b, c)]
    ab, ac, bc = mid(a, b), mid(a, c), mid(b, c)
    n -= 1
    return sierec(a, ab, ac, n) + sierec(b, ab, bc, n) + sierec(c, ac, bc, n)
#+end_src

Then =sierpinski= assembles the triangles into lines, with the help of =toline=:
#+begin_src python :noweb-ref sierpiński
def toline(tri, width):
    a, b, c = tri
    return line(a, b, width) + line(a, c, width) + line(b, c, width)
def sierpinski(a, b, c, n=1, width=.01):
    return [ triangle_line
             for triangle      in sierec(a, b, c, n)
             for triangle_line in toline(triangle, width) ]
#+end_src

Since the sierpinski triangle uses equilateral triangle, the size of the canvas mush be adjusted so that the length of the width is equal to the length of the other sides of the triangles.
This is done by solving $(\frac{width}{2})^2 + height^2 = side^2$, with $side$ being the length of the left and right sides of the triangle.
Since we want $side$ to be equal to $width$, this can be rewritten as $(\frac{width}{2})^2 + height^2 = width^2$, which eventually gives the formula $height = \sqrt{\frac{3 \times width^2}{4}}$, implemented below:
#+begin_src python :noweb-ref sierpiński
def height():
    return int(math.sqrt((3 * width * width) / 4))
#+end_src

Only image specification generation remains, with a reasonable width and a turquoise background:
#+begin_src python :noweb-ref sierpiński
width = 1024
t = (0, .6, .7) # Turquoise.
imgspec(quad(lb+t, rb+t, lt+t, rt+t) + sierpinski(lb, rb, mt, 7, .0015), width, height())
#+end_src


#+call: py("sierpiński")

#+RESULTS:
:results:
[[file:images/imgen/sierpiński.png]]
:end:
