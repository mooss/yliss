#+title: Octasierp: a solid foundation
#+author: mooss
#+property: header-args:bash :eval never

#+property: header-args:cpp :flags -std=c++20 -Wall -Werror :eval never :main no :noweb no-export :wrap "src text :minipage"
#+property: header-args:python :noweb no-export :results output :wrap "src text :minipage" :eval never

* Prelude
** About mathematical rigour

I'll be sometimes hand-wavy with the maths here both because I don't want to bother and because I don't know much about it.


** Inclusion

The following code block includes desired code blocks along with their dependencies.

#+name: include
#+begin_src sh :var args="" :results output :wrap "src cpp" :eval no-export
./litlib/include.pl "octasierp.org litlib/cpp.org" "$args"
#+end_src


* Of octahedrons and Sierpiński triangles
:PROPERTIES:
:header-args:python+: :eval no-export
:END:

This document is about octasierps, fractal solids destined to be used as the basis for a procedurally generated planet.

An octasierp is the brainchild of a regular octahedron and the Sierpiński triangle, the first is the platonic solid formed of 8 equilateral triangles and the second is a recursive subdivision of an equilateral triangle.
Indeed, since each face of an octahedron is an equilateral triangle, it can be divided into 4 smaller equilateral triangles which can themselves be divided and so on, thus adapting the concept of Sierpiński triangles to the third dimension.

This recursive structure is caracterised by its subdivision degree $d \in \mathbb{N}$, which is the number of successive subdivisions necessary to construct it.
The simplest octasierp occurs when $d=0$ and corresponds to an octahedron.

** Goals

This is my second attempt at generating a procedural planet using an octahedron as the starting point.

The main problem I encountered last time was finding a good data structure for my subdivided octahedron as well as implementing the code to get the neighbours of a point.
I ended up using a convoluted approach that I can't even remember now.
Thankfully I don't have to, since I've collected some observations that will help me to build a much simpler and intuitive data structure than last time.

A good data structure for an octasierp should meet some criteria:
 - A coordinate system, both for mental representation and as a programming primitive.
 - A support for different levels of detail, meaning the possibility to further subdivise the structure without having to reconstruct the whole object.
 - A fast way to request the neighbours of a point.

# Note: those goals are not static, the definition of a good data structure will probably expand when I'll get a better grasp on the problem.


** Geometric visualisation

I think an appropriate first step to find the best underlying representation of an octasierp is to visualise the problem, since the subject of study is a geometric concept.

*** Octahedron net

An octahedron can be represented in two dimensions as a net, a flattened arrangement of the eight sides, ready to be folded back into three dimensions.
Look below for an illustration of both the subdivision process and the net of an octahedron, extended to an octasierp.

#+name: montage_octa_degree_0-3
#+caption: Octasierp net for degrees 0, 1, 2 and 3
[[file:images/montage_net_octa_degree_0-3.png]]

*** Squarified net

An interesting property of octasierps is that when you inflate the central angle to 90\textdegree{}, they can almost be represented as a square grid with additional diagonal connections as shown in the figure below.
A strange thing about this representation is that points are neighbouring each other along the sides in a symmetric pattern.
This representation is strongly reminiscent of the Peirce quincuncial projection[fn::See https://en.wikipedia.org/wiki/Peirce_quincuncial_projection.], all the more because the end goal of this project is to generate a planet.

#+attr_latex: :placement [H]
#+name: montage_squa_degree_0-3
#+caption: Octasierp squarified net for degrees 0, 1, 2 and 3
[[file:images/montage_net_squa_degree_0-3.png]]

The figure above provides a nice visualisation, but since it's an image (i.e. a binary file), its not so easy to hack upon, so for the rest of the document I will use a text representation to illustrate the various steps of representation and manipulation of an octasierp.
See below the textual equivalent of this figure[fn::=x= are points, =-= are horizontal lines, =|= are vertical lines and =+= are corners. The representations have been scaled to all appear at the same size, that is normally not the case.]:
#+begin_src python :exports results :eval no-export
<<Textual squarified net>>
between = ' ' * 25
def construct(degree):
    return SquareNet(
        3, list(range(degree+1)),
        display_redundant='x'
    ).repr()
for deg0, deg1 in zip(construct(0), construct(1)):
    print(deg0 + between + deg1)
print('           degree = 0           ' + between + '            degree = 1')
print()
print()
for deg2, deg3 in zip(construct(2), construct(3)):
    print(deg2 + between + deg3)
print('           degree = 2           ' + between + '            degree = 3')
#+end_src

#+RESULTS:
#+begin_src text :minipage
x---------------x---------------x                         x-------x-------x-------x-------x
|               |               |                         |               |               |
|               |               |                         |               |               |
|               |               |                         |               |               |
|               |               |                         x       x       x       x       x
|               |               |                         |               |               |
|               |               |                         |               |               |
|               |               |                         |               |               |
x---------------X---------------x                         x-------x-------X-------x-------x
|               |               |                         |               |               |
|               |               |                         |               |               |
|               |               |                         |               |               |
|               |               |                         x       x       x       x       x
|               |               |                         |               |               |
|               |               |                         |               |               |
|               |               |                         |               |               |
x---------------x---------------x                         x-------x-------x-------x-------x
           degree = 0                                                degree = 1


x---x---x---x---x---x---x---x---x                         x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x
|               |               |                         x x x x x x x x x x x x x x x x x
x   x   x   x   x   x   x   x   x                         x x x x x x x x x x x x x x x x x
|               |               |                         x x x x x x x x x x x x x x x x x
x   x   x   x   x   x   x   x   x                         x x x x x x x x x x x x x x x x x
|               |               |                         x x x x x x x x x x x x x x x x x
x   x   x   x   x   x   x   x   x                         x x x x x x x x x x x x x x x x x
|               |               |                         x x x x x x x x x x x x x x x x x
x---x---x---x---X---x---x---x---x                         x-x-x-x-x-x-x-x-X-x-x-x-x-x-x-x-x
|               |               |                         x x x x x x x x x x x x x x x x x
x   x   x   x   x   x   x   x   x                         x x x x x x x x x x x x x x x x x
|               |               |                         x x x x x x x x x x x x x x x x x
x   x   x   x   x   x   x   x   x                         x x x x x x x x x x x x x x x x x
|               |               |                         x x x x x x x x x x x x x x x x x
x   x   x   x   x   x   x   x   x                         x x x x x x x x x x x x x x x x x
|               |               |                         x x x x x x x x x x x x x x x x x
x---x---x---x---x---x---x---x---x                         x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x
           degree = 2                                                degree = 3
#+end_src

Everything related to the generation of the textual representation is gathered in the section [[#textual_quarter][Textual representation]].


** Some terminology

*** Degrees

When used in isolation, degree is the shorthand for degree of subdivision.
I must offer this clarification because, unfortunately there are other degrees, such as the degree of appearance.

*** Quarters

A squarified net can be divided into four quarters, each being a rotated image of the others around the central point.
This means rules devised for one quarter can easily be adapted to the others.

Those quarters are identified by a number ranging from 0 to 3, with quarter 0 being the top-right one and the others being numerated counter-clockwise.
The counter-clockwise rotation has been chosen to correspond to the sense of trigonometric rotation.

*** Poles and corners

To pay hommage to both the planet metaphor and the peirce quincuncial projection, the central point is the north pole, while the four extremes are one and the same, the south pole.

The four midpoints of the sides are actually just random points on the equator but since they also are initial vertices of the octasierp, let's give them a name ; the four corners of the world, with the right one being corner 0 and the others numerated once again counter-clockwise.
I know that the four corners are a bit confusing because from the 2d perspective of the squarified net, the corners of the square are actually the south pole but it will make more sense in 3d and I really like the term, so it stays.


** Coordinate system

Based on the observation of the squarified net, the natural coordinate system for an octasierp is an indexing along the axis between the central point and corner 0 (the x-axis) and the one between the central point and corner 1 (the y-axis).
In this scheme, the central point (of coordinates $(0, 0)$) is also the north pole.

Since an octasierp is a discrete structure, the coordinates will be integer-based.
An unfortunate side effect of integer coordinates is that except for the north pole, points will not keep their coordinates when the degree of subdivision changes.
For example, in the illustration below, when $degree = 0$, corner 0 is at the coordinates $(1, 0)$ and when $degree = 1$ it is at the coordinates $(2, 0)$.
In the end, the rule is that coordinates only make sense at a given degree.

#+begin_src python :exports results
<<Textual squarified net>>
<<listr_replace>>
deg0 = SquareNet(0, None, show_axis=True).repr()
listr_replace(deg0, [(2, 10, 'Z   <====== Corner 0 at degree 0')])
print('\n'.join(deg0))

print()
print('__________________________________________')
print()
deg1 = SquareNet(1, None, show_axis=True).repr()
listr_replace(deg1, [(3, 14, 'Z   <== Corner 0 at degree 1')])
print('\n'.join(deg1))
#+end_src

#+RESULTS:
#+begin_src text :minipage
   ^
+1 |  +-+-+
 0 |  +-o-Z   <====== Corner 0 at degree 0
-1 |  +-+-+
   +-------->
      1 0 1
      -   +

__________________________________________

   ^
+2 |  +---+---+
+1 |  |   |   |
 0 |  +---o---Z   <== Corner 0 at degree 1
-1 |  |   |   |
-2 |  +---+---+
   +------------>
      2 1 0 1 2
      - -   + +
#+end_src

Another problem is that there is a redundancy in this coordinate system that needs to be resolved (most strikingly, the south pole is present four times).
First the cardinality of a half-axis (that is to say the number of points on it) must be derived.
Then that property will be used to describe precisely the redundancy problem.
Finally, a solution will be proposed to resolve the redundancy problem and fix the coordinate system.

*** Half-axis cardinality

To pass from degree $d$ to degree $d + 1$, points are inserted between every adjacent point.
From degree 0 to degree 1, 1 point is added, from degree 1 to 2, 2 points are inserted, then 4, then 8, then $2^4$, then $2^5$, and so on.
Another way to see it is that the number of points added at degree $d + 1$ is the number of segments at degree $d$ ; we start with one segment to subdivise, then two, then four and so on.

Based on what we have deduced so far, we can express this number with the relation $\vert points_{d+1} \vert = \vert points_d \vert + 2^{d}$ with $d \in \mathbb{N}$.
The problem is that I don't know anymore how to process this kind of recurrence relationships and I can't be bothered to find how so let's just make a hasardous guess from the first five numbers, shown in table [[hasardous_guess]].
A most interesting pattern made evident by this table is that in each line we add $2^d$ to itself, plus one.
Thus we deduce that $\vert points_{d+1} \vert = 2 \times 2^d + 1 \Leftrightarrow \vert points_{d+1} \vert = 2^{d+1} + 1 \Leftrightarrow \vert points_d \vert = 2^{d} + 1$.

#+name: hasardous_guess
#+caption: Small amount of data to support my dubious claim (no mathematicians were hurt in the process (not on purpose at least))
| $d$ | $\vert points_d \vert$ | $2^{d}$ | $\vert points_{d+1} \vert$ |
|-----+------------------------+---------+----------------------------|
|   0 |                      2 |       1 |                          3 |
|   1 |                      3 |       2 |                          5 |
|   2 |                      5 |       4 |                          9 |
|   3 |                      9 |       8 |                         17 |
|   4 |                     17 |      16 |                         33 |

*** Points redundancy

A peculiar caracteristic of the squarified-net-inspired coordinate system is that there is a redundancy at the edges, where the four corners act as a center of symmetry.
For example, at degree 2 the points $A = (-3, 4)$ and $B = (3, 4)$ are the same, as well as the points $C = (4, 2)$ and $D = (4, -2)$:
#+name: Octasierp redundancy example
#+begin_src python :exports none :eval never
<<Textual squarified net>>
<<listr_replace>>
redundant_representation = SquareNet(2, [0, 1, 2], display_redundant=display_redundant, show_axis=True).repr()
listr_replace(redundant_representation, [
    (1, 8, 'A'),
    (1, 20, 'B'),
    (3, 22, 'C'),
    (7, 22, 'D')
])
print('\n'.join(redundant_representation))
#+end_src

#+begin_src python :exports results :eval no-export
display_redundant='x'
<<Octasierp redundancy example>>
#+end_src

#+RESULTS:
#+begin_src text :minipage
   ^
+4 |  x-A-x-x-x-x-x-B-x
+3 |  x x x x x x x x x
+2 |  x x x x x x x x C
+1 |  x x x x x x x x x
 0 |  x-x-x-x-X-x-x-x-x
-1 |  x x x x x x x x x
-2 |  x x x x x x x x D
-3 |  x x x x x x x x x
-4 |  x-x-x-x-x-x-x-x-x
   +-------------------->
      4 3 2 1 0 1 2 3 4
      - - - -   + + + +
#+end_src

We can deduce a general rule from this example.

First we need to find what are the extreme values of our coordinate system at a given degree.
The extreme value we are looking for here will be the number of points on an half-axis minus one, since the numerotation starts at 0.
We already know the number of points on a half-axis at degree $d$ to be $\vert points_d \vert = 2^{d} + 1$ so the extreme value we are looking for is $2^d$.

Since the centers of symmetry are the four corners, the following rules can be deduced for the redundant points at degree $d$ depending on the corners they are centered around:
 - *corner 0*: $\{(2^d, n), (2^d, -n)\}$
 - *corner 1*: $\{(n, 2^d), (-n, 2^d)\}$
 - *corner 2*: $\{(-2^d, n), (-2^d, -n)\}$
 - *corner 3*: $\{(n, -2^d), (-n, -2^d)\}$
With $n \in \mathbb{N}$ and $0 \leq n \leq 2^d$, so technically the centers of symmetry are included (when $n=0$).
Note that a special case arise when $n=2^d$, where the redundant points - for all the corners - are the south pole.

When applied to our four example points, the rules are correctly implying that:
 - $A = (-3, 4)$ and $B = (3, 4)$ are centered around corner 1 with $n=3$.
 - $C = (4, 2)$ and $D = (4, -2)$ are centered around corner 0 with $n=2$.

*** Border disputes and canonical quarters

Because there are redundancies in the coordinate system, it will be useful to define the canonical quarter of a redundant point, that is to say the one to which they "officially" belong.
Two main cases need to be treated:
 - The poles because they are on every quarter.
 - The borders between quarters (excluding the poles) because they are shared between two quarters.

There are only two poles, so they cannot be distributed equally between the four quarters.
Rather that attributing one pole to, say the quarter 0 and another to the quarter 2, I prefer to give them both to quarter 0 because:
 1. It is more memorable.
 2. It gets the message across that quarter 0 is the reference quarter, or The canonical quarter, if you will.

Quarter 1, 2 and 3 are essentially a rotation of quarter 0.
We resolve the border dispute between quarters by using this property.
The top and bottom border of quarter 0, i.e. its border with quarter 1 and quarter 3 respectively are attributed to quarter 0.
By rotation, every border has its quarter and every quarter has its border.

Beyond those two cases we just resolved lurks a third one, the corners.
Even though they technically belong to the borders, the rotation mecanism would still make them shared between quarters because there would be two corners per quarter while there is the same number of corners and quarters (4).
To solve this last issue, we'll just say that the bottom right corner belongs to quarter 0 and as always, this rule applies by rotation to the other quarters.

Here is the updated example from the previous section, with =v= characters (as well as =A= and =C=) representing redundant points[fn::The canonical counterparts of those points are still represented with an =x=.]:
#+begin_src python :exports results :eval no-export
display_redundant='v'
<<Octasierp redundancy example>>
#+end_src

#+RESULTS:
#+begin_src text :minipage
   ^
+4 |  v-A-v-v-x-x-x-B-x
+3 |  x x x x x x x x v
+2 |  x x x x x x x x C
+1 |  x x x x x x x x v
 0 |  x-x-x-x-X-x-x-x-x
-1 |  v x x x x x x x x
-2 |  v x x x x x x x D
-3 |  v x x x x x x x x
-4 |  v-x-x-x-x-v-v-v-v
   +-------------------->
      4 3 2 1 0 1 2 3 4
      - - - -   + + + +
#+end_src

*** About the resemblance

I must address the fact that the representation without redundant points bears an unfortunate resemblance with a swastika:
#+begin_src python :exports results :eval no-export
<<Textual squarified net>>
print(SquareNet(2, list(range(3))))
#+end_src

#+RESULTS:
#+begin_src text :minipage
+-------x-x-x-x-x
x x x x x x x x |
x x x x x x x x |
x x x x x x x x |
x-x-x-x-X-x-x-x-x
| x x x x x x x x
| x x x x x x x x
| x x x x x x x x
+-x-x-x-x-------+
#+end_src

At first I tried to find other representations but found no other fitting my needs.
Then I thought about at least trying to make the arms point the other way but this contradicted the intuitive representation I had in mind so I finally decided to not let a hideous historical artifact affect a technical decision.
If you are offended by this decision I'm sorry about it.


** Storage

The challenge in storing an octasierp is that it can *almost* be reduced to a square grid, which is the polite way to say can it *cannot* be reduced to a square grid.

This is unfortunate because a square grid is excessively easy to represent in memory.
Had an octasierp been a square of side $n$, it would have been storable as an array of $n \times n$ values.

*** Separate scheme

It would be good to find an octasierp storage scheme that can grow new points without needing to move the old ones.
However, that would imply storing each stage separately and would have the following problems:
 1. Memory would not be contiguous thus slowing iteration on all points.
 2. It would be tedious to pull off because when an octasierp grows, new points are added in a checkered pattern as illustrated below.
 3. The indexing scheme would need to be a bit too clever to account for this checkered pattern (meaning it would require more computation than the alternative).

Growth of quarter 0 at degrees 0, 1, 2 and 3:
#+begin_src python :eval no-export :exports results
<<Textual squarified net>>

for degree in range(4):
    print('Quarter 0 at degree d=' + str(degree) + ':')
    in_between = max(0, degree - 1)
    representation = ['a'] + ['0'] * in_between + ['*']
    print(Quarter(degree, list(range(degree + 1)), display_points=representation))
    if degree < 3:
        print()
#+end_src

#+RESULTS:
#+begin_src text :minipage
Quarter 0 at degree d=0:
+-a
X-a

Quarter 0 at degree d=1:
+-*-a
| * |
X-*-a

Quarter 0 at degree d=2:
+-*-0-*-a
| * * * |
| * 0 * |
| * * * |
X-*-0-*-a

Quarter 0 at degree d=3:
+-*-0-*-0-*-0-*-a
| * * * * * * * |
| * 0 * 0 * 0 * |
| * * * * * * * |
| * 0 * 0 * 0 * |
| * * * * * * * |
| * 0 * 0 * 0 * |
| * * * * * * * |
X-*-0-*-0-*-0-*-a
#+end_src
\\
Legend:
 - =X= :: North pole.
 - =a= :: Other points of degree 0, including the south pole.
 - =*= :: New point at degree $d$.
 - =0= :: Points between degree 1 and degree $d - 1$.

*** Rectangular scheme

A simpler storage scheme can use to its advantage the fact that, for a given quarter, points of degree greater than zero have a neatly rectangular repartition.
This can be illustrated by looking at the growth of quarter 0 when all points appearing after the degree 0 are given the same symbol:
#+begin_src python :eval no-export :exports results
<<Textual squarified net>>

for degree in range(4):
    print('Quarter 0 at degree d=' + str(degree) + '.')
    print(Quarter(degree, list(range(degree + 1)), display_points=['a', '0']))
    if degree < 3:
        print()
#+end_src

#+RESULTS:
#+begin_src text :minipage
Quarter 0 at degree d=0.
+-a
X-a

Quarter 0 at degree d=1.
+-0-a
| 0 |
X-0-a

Quarter 0 at degree d=2.
+-0-0-0-a
| 0 0 0 |
| 0 0 0 |
| 0 0 0 |
X-0-0-0-a

Quarter 0 at degree d=3.
+-0-0-0-0-0-0-0-a
| 0 0 0 0 0 0 0 |
| 0 0 0 0 0 0 0 |
| 0 0 0 0 0 0 0 |
| 0 0 0 0 0 0 0 |
| 0 0 0 0 0 0 0 |
| 0 0 0 0 0 0 0 |
| 0 0 0 0 0 0 0 |
X-0-0-0-0-0-0-0-a
#+end_src
\\
Legend:
 - =X= :: North pole.
 - =a= :: Other points of degree 0, including the south pole.
 - =0= :: Points of degree greater than 0.

This pattern is repeated by rotation for other quarters, as can be observed for quarter 1 at degree 3:
#+begin_src python :eval no-export :exports results
<<Textual squarified net>>
print(Quarter(3, list(range(4)), quarter=1, display_points=['b', '1']))
#+end_src

#+RESULTS:
#+begin_src text :minipage
+---------------b
1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1
+---------------o
#+end_src
\\
Legend:
 - =o= :: Origin, aka north pole.
 - =b= :: Point of degree 0 (there is only one for quarter 1).
 - =1= :: Points of degree greater than 0.

\\
Using this rectangular storage scheme, all the points can be stored contiguously, and this is actually what will be done in practice because this has the following implications:
 - Contiguous storage can be iterated upon very fast.
 - Implementation using a =std::vector= is handy because methods from the vector can be used as-is in the octasierp implementation, most notably =begin= and =end=, making iteration on points basically free.

*** Cardinality

The rectangular storage scheme requires to know the size of the rectangle.
Looking at the textual representation of quarter 0 will help for this:
#+begin_src python :eval no-export :exports results
<<Textual squarified net>>

for degree in range(3):
    print('Quarter 0 at degree d=' + str(degree) + '.')
    print(Quarter(degree, list(range(degree + 1)), display_points=['a', '0']))
    if degree < 2:
        print()
#+end_src

#+RESULTS:
#+begin_src text :minipage
Quarter 0 at degree d=0.
+-a
X-a

Quarter 0 at degree d=1.
+-0-a
| 0 |
X-0-a

Quarter 0 at degree d=2.
+-0-0-0-a
| 0 0 0 |
| 0 0 0 |
| 0 0 0 |
X-0-0-0-a
#+end_src
\\
Legend:
 - =X= :: North pole.
 - =a= :: Other points of degree 0, including the south pole.
 - =0= :: Points of degree greater than 0.

An important observation is that vertically the whole quarter is covered, but horizontally two columns are missing.
Additionally, the quarter's shape goes from a $2 \times 2$ square at degree zero into a square of $3 \times 3$ and $5 \times 5$ at degrees one and two.

Because the subdivision mechanism inserts a point between each existing one, there is a power of two somewhere in there.
A bruteforce deduction should be enough to tell that a given quarter at degree $d$ will have a shape of $2^d + 1$ by $2^d + 1$.

Looking at the following representation of quarter 0 at degree 3 in all its $9 \times 9$ glory is enough to convince me:

#+begin_src python :eval no-export :exports results
<<Textual squarified net>>
print(Quarter(3, list(range(4)), quarter=0, display_points=['a', '0']))
#+end_src

#+RESULTS:
#+begin_src text :minipage
+-0-0-0-0-0-0-0-a
| 0 0 0 0 0 0 0 |
| 0 0 0 0 0 0 0 |
| 0 0 0 0 0 0 0 |
| 0 0 0 0 0 0 0 |
| 0 0 0 0 0 0 0 |
| 0 0 0 0 0 0 0 |
| 0 0 0 0 0 0 0 |
X-0-0-0-0-0-0-0-a
#+end_src

Removing the two empty columns gives us a $2^d - 1$ by $2^d + 1$ rectangle containing all points of degrees 1 to $d$ for quarter 0.
The sames applies by rotation to quarter 1, 2 and 3.
By adding the six initial points, we have the numbers of points in an octasierp of degree $d$ $\vert octasierp_d \vert = 4 (2^d - 1) (2^d + 1) + 6$, which boils down to the very pleasing $\vert octasierp_d \vert = 2^{2d+2} + 2$.

*** Ordering and indexing

To be indexable, a storage scheme must define an order so that each element has its place and each place its element.
The indexation is based on the previously defined coordinate system.

At the highest level, the first 6 places are reserved for the points of degree 0, then come the points of strictly positive degree from quarter 0, then those same points for quarter 1, 2 and 3.
Therefore, at degree 1, the storage looks like this: =NSABCD000111222333=, with =NSABCD= representing the points of degree 0 (north pole, south pole, and corners 0 to 3) and =0=, =1=, =2= and =3= their respective quarter.

At the quarter level, the procedure is as usual to define rules for quarter 0 and then apply them to the other quarters by rotation.

Within quarter 0, a simple way to order the points is to do as if they were in a graph, with the first coordinate indexing the x axis and the second coordinate indexing the y axis.
The resulting point order is illustrated below for quarter 0 at degree 2, with hexadecimal digits to keep them one character only:
#+begin_src text :minipage
   ^
+4 |  +-------+-c-d-e-x
+3 |  |       | 9 a b |
+2 |  |       | 6 7 8 |
+1 |  |       | 3 4 5 |
 0 |  +-------X-0-1-2-x
-1 |  |       |       |
-2 |  |       |       |
-3 |  |       |       |
-4 |  +-------+-------+
   +-------------------->
      4 3 2 1 0 1 2 3 4
      - - - -   + + + +
#+end_src
\\
\\
By rotation, quarter 1 is ordered this way:
#+begin_src text :minipage
   ^
+4 |  +-------x-------+
+3 |  e b 8 5 2       |
+2 |  d a 7 4 1       |
+1 |  c 9 6 3 0       |
 0 |  +-------o-------+
-1 |  |       |       |
-2 |  |       |       |
-3 |  |       |       |
-4 |  +-------+-------+
   +-------------------->
      4 3 2 1 0 1 2 3 4
      - - - -   + + + +
#+end_src
\\
\\
And so on with the other quarters.


** Iteration

Iteration facilities are needed to manipulate an octasierp in a meaningful way.
Iteration is much more tricky to explain using the textual representation so this section is going to be light on illustrations.
The best visualisation at hand is to remember the squarified net for degrees 0 through 4 that was previously included above and is once again visible below:
#+attr_latex: :placement [H]
[[file:images/montage_net_squa_degree_0-3.png]]

*** Points

If the storage is one continuous block, as should be the case with the rectangular storage scheme, iteration on all the points simply corresponds to iteration on the storage.
Since this storage order has no particular meaning outside of allowing an easy-ish translation from coordinates to storage index, this kind of iteration is for most practical purposes orderless.

If the storage is not one continous block, something else should be done depending on how the storage is handled.


** Binary degree

We can simplify the problem of finding the degree of appearance of a point by going from a rectangular grid to discrete points on a line.

The subdivision process is pretty much the same for a line and for a rectangular grid.
At degree 0, there are two points, at degree 1 one more point appears, at degree 2 there are two more points, four more at degree 3, then eight, then sixteen, and so on.

#+attr_latex: :placement [H]
#+name: bindeg_x0
#+caption: Degrees of appearance at subdivision degree 0
| Index                | 0 | 1 |
|----------------------+---+---|
| Degree of appearance | 0 | 0 |

#+attr_latex: :placement [H]
#+name: bindeg_x1
#+caption: Degrees of appearance at subdivision degree 1
| Index                | 0 | 1 | 2 |
|----------------------+---+---+---|
| Degree of appearance | 0 | 1 | 0 |

#+attr_latex: :placement [H]
#+name: bindeg_x2
#+caption: Degrees of appearance at subdivision degree 2
| Index                | 0 | 1 | 2 | 3 | 4 |
|----------------------+---+---+---+---+---|
| Degree of appearance | 0 | 2 | 1 | 2 | 0 |

#+attr_latex: :placement [H]
#+name: bindeg_x3
#+caption: Degrees of appearance at subdivision degree 3
| Index                | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 |
|----------------------+---+---+---+---+---+---+---+---+---|
| Degree of appearance | 0 | 3 | 2 | 3 | 1 | 3 | 2 | 3 | 0 |

An interesting thing to note here is that since a new point is introduced between every adjacent points, a point's index is doubled at each subdivision so what is point 1 at subdivision degree 1 becomes point 4 at subdivision degree 3, thanks to two consecutive multiplications.

$bindeg_{i,d}$ (binary degree) is the function outputting the degree of appearance of a point when given its index $i$ and a global degree of subdivision $d$.
We have $i \in \mathbb{N}$ and $d \in \mathbb{N}$, with $0 \leq i \leq 2^d$.

In my uninformed opinion, it behaves as some kind of weird distance between $i$ and $2^d$, in that it is inversely proportional to the number of times the index can be divided by 2, with a maximum number of division of $d$.
This inversely proportional relation is illustrated in the table below, in which $d - bindeg_{i,d}$ is shown to be equal to the number of times $i$ is divisible by 2 when $d = 3 \implies 2^d = 8$.
Note that $i = 0$ is a special case, and the reason why +we can't have nice things+ there is a rule about having $d$ as the maximum number of divisions.

#+attr_latex: :placement [H]
| $i$                | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 |
|--------------------+---+---+---+---+---+---+---+---+---|
| $bindeg_{i,3}$     | 0 | 3 | 2 | 3 | 1 | 3 | 2 | 3 | 0 |
| $3 - bindeg_{i,3}$ | 3 | 0 | 1 | 0 | 2 | 0 | 1 | 0 | 3 |

We can enumerate the binary degrees relatives to $2^3 = 8$ like so:
 - $0 = bindeg_{0,3} = bindeg_{8, 3}$
 - $1 = bindeg_{4,3}$
 - $2 = bindeg_{2,3} = bindeg_{6,3}$
 - $3 = bindeg_{1,3} = bindeg_{3,3} = bindeg_{5,3} = bindeg_{7,3}$

This is just another way to present the binary degrees at subdivision degree 3.
The key observation is that the points with the highest binary degree are all the odd ones.
This phenomenon can be explained by construction:
 - When going from degree $d - 1$ to degree $d$, a new point is inserted between the first two.
 - This new point is now point $1$ and the points to its right are increased by $1$.
 - The next point will insert itself at the right of what was the odd point $1$ but now is the even point $2$ and we find ourselves in the initial case, we are inserting the new point into a odd position, thus moving the next point into an even position.
 - This situation repeats itself until the end of the sequence and explains why a point's index doubles every subdivision.

We now have at our disposition three elements which can be used to construct a definition for the binary degree:
 1. The first and last indexes, $0$ and $2^d$ always appears at degree $0$ ($bindeg_{0, d} = bindeg_{2^d, d} = 0$).
 2. Indexes are multiplied by two every subdivision, while their degree of appearance stays the same ($bindeg_{i,d} = bindeg_{2i, d + 1}$).
 3. Odd indexes have the maximal binary degree ($i \bmod 2 = 1 \implies bindeg_{i, d} = d$).

From 1., we have the initial values.
From 3., we have the values of odd points.
By combining 2. and 3., we can deduce the values of the other even points, because 2. is equivalent to $i \bmod 2 = 0 \implies bindeg_{i,d} = bindeg_{\frac{i}{2},d-1}$, thus we can divise even values until they are odd to obtain their binary degree.


* Implementation

An =pointless_octasierp= is an octasierp that does not store points and is therefore only useful for theoretical manipulation.
I coudn't resist.
#+name: pointless_octasierp
#+begin_src cpp :minipage
struct pointless_octasierp {
    const std::size_t degree;
    // Maximum value of the half-axis (half-axis cardinality - 1).
    const int extreme_index;
    // Width of the rectangular storage of one quarter.
    const std::size_t quarter_rectangle_width;
    // Number of points of the rectangular storage of one quarter.
    const std::size_t quarter_rectangle_cardinality;

    pointless_octasierp()=delete;
    pointless_octasierp(std::size_t _degree):
        degree(_degree),
        extreme_index(1 << degree),
        quarter_rectangle_width(extreme_index - 1),
        quarter_rectangle_cardinality(quarter_rectangle_width * (extreme_index + 1))
    {}

    <<pointless_octasierp/public>>
};
#+end_src
Note:
 - =extreme_index= in an =int= because the coordinate system uses negative indexes.

Since everyting is const, the only way to change the degree is to create a new =pointless_octasierp= instance, therefore the various cached variables bound to the degree are guaranteed to be kept in sync.

** Points cardinality

The size of an octasierp, previously described as $\vert octasierp_d \vert = 2^{2d+2} + 2$, can be translated in C++ to the following, using the fact that $2^n$ can be expressed as =1 << n=:
#+begin_src cpp :minipage :noweb-ref pointless_octasierp/public
std::size_t points_cardinality() const {
    return (1 << (2 * degree + 2)) + 2;
}
#+end_src

Usage:
#+begin_src cpp :eval no-export :exports both :minipage
<<include(":noweb print pointless_octasierp")>>

int main() {
    auto printer = print{{.sep=""}};
    for(std::size_t degree: {0, 1, 2, 3, 4}) {
        pointless_octasierp octa(degree);
        printer("This octasierp of degree ", degree, " would have had ",
                octa.points_cardinality(), " points had it not been pointless.");
    }
}
#+end_src

#+RESULTS:
#+begin_src text :minipage
This octasierp of degree 0 would have had 6 points had it not been pointless.
This octasierp of degree 1 would have had 18 points had it not been pointless.
This octasierp of degree 2 would have had 66 points had it not been pointless.
This octasierp of degree 3 would have had 258 points had it not been pointless.
This octasierp of degree 4 would have had 1026 points had it not been pointless.
#+end_src


** Storage

The code block below forms the outline of the actual octasierp implementation, the one using a =std::vector= to store the points.

#+name: octasierp
#+begin_src cpp :minipage
template<typename Point>
class octasierp {
  public:
    using value_type = Point;

    octasierp()=delete;
    octasierp(std::size_t degree, Point const& initial_value):
        bound_(degree), storage_(bound_.points_cardinality(), initial_value)
    {}

    auto begin() {return storage_.begin();}
    auto end() {return storage_.end();}
    auto begin() const {return storage_.begin();}
    auto end() const {return storage_.end();}
    auto size() const {return storage_.size();}

    const pointless_octasierp& bound() const {return bound_;}
    auto degree() const {return bound_.degree;}

    <<octasierp/public>>

  private:
    pointless_octasierp bound_;
    std::vector<Point> storage_;
};
#+end_src
#+depends:octasierp :noweb pointless_octasierp :cpp vector cmath

Points iteration is built into the above via the =begin= and =end= shortcuts, which makes range-based iteration possible as shown below:
#+begin_src cpp :eval no-export :exports both :minipage
<<include(":noweb octasierp type_str print")>>
int main() {
    octasierp octa(1, -1);
    print{"Built an octasierp of degree", octa.degree(),
          "containing", octa.size(), type_str<decltype(octa)::value_type>()};
    for(auto point: octa)
        print{{.end="|"}}(point);
}
#+end_src

#+RESULTS:
#+begin_src text :minipage
Built an octasierp of degree 1 containing 18 int
-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|-1|
#+end_src


** Note on the pointless and point-filled octahedra variants

The idea behind separating =octasierp= from =pointless_octasierp= is to be able to query the various properties of an octasierp without having to actually allocate points.
Therefore, everything not directly linked with the actual storage will go in the =pointless_octasierp=.


** Coordinates validation

The representation of a squarified octasierp net of degree 2 below can help creating a coordinates validation method:
#+begin_src python :eval no-export :exports results
<<Textual squarified net>>
<<quarter_rep>>
# print(SquareNet(2, list(range(3)), show_axis=True, point_rep=quarter_rep))
print(SquareNet(2, list(range(3))))
#+end_src

#+RESULTS:
#+begin_src text :minipage
+-------x-x-x-x-x
x x x x x x x x |
x x x x x x x x |
x x x x x x x x |
x-x-x-x-X-x-x-x-x
| x x x x x x x x
| x x x x x x x x
| x x x x x x x x
+-x-x-x-x-------+
#+end_src

That method can take the form below, by first testing if the coordinates are within the internal square, and otherwise testing if they are within the top part of quarter 0 and otherwise test the other quarters by rotation.
#+begin_src cpp :noweb-ref pointless_octasierp/public
bool valid_coordinates(int i, int j) const {
    if(abs(i) < extreme_index && abs(j) < extreme_index)
        return true;
    if(j == extreme_index)
        return i >= 0 && i <= extreme_index;
    if(i == -extreme_index)
        return j >= 0 && j < extreme_index;
    if(j == -extreme_index)
        return i <= 0 && i > -extreme_index;
    return i == extreme_index && j <= 0 && j > -extreme_index;
}
#+end_src

The following function can be used to print a shadow of a squarified net by asking every step of the way whether the current coordinate is valid:
#+name: print_squarenet_shadow
#+begin_src cpp
template<typename WhichChar>
void print_squarenet_shadow(
    const pointless_octasierp& octa,
    int extremum,
    const WhichChar& which_char
) {
    print printer{{.sep="", .end=""}};
    for(int j = extremum; j >= -extremum; --j) {
        for(int i = -extremum; i <= extremum; ++i) {
            if(i == 0 && j == 0)
                printer(0);
            else
                printer(octa.valid_coordinates(i, j) ? which_char(i, j): '.');
            if(i != extremum)
                printer(" ");
        }
        print{};
    }
}
#+end_src
#+depends:print_squarenet_shadow :noweb pointless_octasierp print

#+begin_src cpp :eval no-export :exports both
<<include(":noweb pointless_octasierp print_squarenet_shadow")>>
int main() {
    pointless_octasierp octa(2);
    print_squarenet_shadow(octa, 6, [](int i, int j){return 'X';});
}
#+end_src

#+RESULTS:
#+begin_src text :minipage
. . . . . . . . . . . . .
. . . . . . . . . . . . .
. . . . . . X X X X X . .
. . X X X X X X X X . . .
. . X X X X X X X X . . .
. . X X X X X X X X . . .
. . X X X X 0 X X X X . .
. . . X X X X X X X X . .
. . . X X X X X X X X . .
. . . X X X X X X X X . .
. . . X X X X . . . . . .
. . . . . . . . . . . . .
. . . . . . . . . . . . .
#+end_src


** Indexing

Those indexing methods are delegating all the work to =bound_='s =index_of= method.
#+begin_src cpp :noweb-ref "octasierp/public"
const Point& point(int i, int j) const {
    return storage_[bound_.index_of(i, j)];
}

Point& point(int i, int j) {
    return storage_[bound_.index_of(i, j)];
}
#+end_src

=index_of= is a hairy beast because it is all about cutting a not-so-trivial figure into its more easily manageable components.
The illustration below shows those manageable components:
 - The north and south poles (=X= and =S=).
 - The four corners (=a=, =b=, =c= and =d=).
 - The isolated quarters (=0=, =1=, =2= and =3=).

# Helper to distinctly print the points representation according to quarter and degree.
#+name: quarter_rep
#+begin_src python :exports none
def quarter_rep(quarter):
    return [['a', '0'], ['b', '1'], ['c', '2'], ['d', '3']][quarter]
#+end_src
# This code block is disabled because the south pole has been inserted manually below.
#+begin_src python :eval never :exports results
<<Textual squarified net>>
<<quarter_rep>>
print(SquareNet(2, list(range(3)), show_axis=True, point_rep=quarter_rep))
#+end_src

#+RESULTS:
#+begin_src text :minipage
   ^
+4 |  +-------b-0-0-0-S
+3 |  1 1 1 1 1 0 0 0 |
+2 |  1 1 1 1 1 0 0 0 |
+1 |  1 1 1 1 1 0 0 0 |
 0 |  c-2-2-2-X-0-0-0-a
-1 |  | 2 2 2 3 3 3 3 3
-2 |  | 2 2 2 3 3 3 3 3
-3 |  | 2 2 2 3 3 3 3 3
-4 |  +-2-2-2-d-------+
   +-------------------->
      4 3 2 1 0 1 2 3 4
      - - - -   + + + +
#+end_src

In an attempt to make the beast below a bit more readable, it only contains the "cutting into manageable parts" logic.
The return statements are handled in the four next subsections, one per quarter.
This if forest can certainly be optimised, be it from a readability perspective or from a performance perspective.
#+begin_src cpp :noweb-ref "pointless_octasierp/public"
std::size_t index_of(int i, int j) const {
    if(i > 0) {
        if(j >= 0) {
            if(i < extreme_index) {
                <<Index of quarter 0 degree > 0>>
            } else {
                <<Index of corner 0 or south pole>>
            }
        } else {
            <<Index of quarter 3 degree > 0>>
        }
    } else if(i < 0) {
        if(j < 0) {
            <<Index of quarter 2 degree > 0>>
        } else if(j > 0) {
            <<Index of quarter 1 degree > 0>>
        } else { // j == 0
            if(i == -extreme_index) {
                <<Index of corner 2>>
            } else {
                <<Index of quarter 2 degree > 0>>
            }
        }
    } else { // i == 0
        if(j > 0) {
            if(j == extreme_index) {
                <<Index of corner 1>>
            } else {
                <<Index of quarter 1 degree > 0>>
            }
        } else if(j < 0) {
            if(j == -extreme_index) {
                <<Index of corner 3>>
            } else {
                <<Index of quarter 3 degree > 0>>
            }
        } // i == 0 and j == 0, therefore north pole.
    }
    <<Index of north pole>>
}
#+end_src

Not that the parameters =i= and =j= are assumed to be correct, that is to say they are assumed to refer to a valid canonical point.
It's up to the caller to ensure the validity of =i= and =j=.

*** Quarter 0

Illustration at degree 2 of the points that are handled in this section:
# This code block is disabled for the same reason as the previous one.
#+begin_src python :eval never :exports results
<<Textual squarified net>>
<<quarter_rep>>
print(SquareNet(2, list(range(3)), quarters={0}, show_axis=True, point_rep=quarter_rep))
#+end_src

#+RESULTS:
#+begin_src text :minipage
   ^
+4 |  +-------+-0-0-0-S
+3 |  |       | 0 0 0 |
+2 |  |       | 0 0 0 |
+1 |  |       | 0 0 0 |
 0 |  +-------X-0-0-0-a
-1 |  |       |       |
-2 |  |       |       |
-3 |  |       |       |
-4 |  +-------+-------+
   +-------------------->
      4 3 2 1 0 1 2 3 4
      - - - -   + + + +
#+end_src
\\
Legend:
 - =X= :: North pole.
 - =S= :: South pole.
 - =a= :: Corner 0.
 - =0= :: Points of degree greater than 0.

The indexes of the north pole, south pole and corner 0 are trivial to find.
#+name: Index of north pole
#+begin_src cpp
return 0;
#+end_src

#+name: Index of corner 0 or south pole
#+begin_src cpp
if(j == 0)
    return 2;
else
    return 1;
#+end_src

The other points are barely more difficult since it's just a rectangle indexation $+6$ after taking the points of degree 0 into account and $-1$ after taking the offset of =i= into account.
#+name: Index of quarter 0 degree > 0
#+begin_src cpp
return quarter_rectangle_width * j + i + 5;
#+end_src

*** Quarter 1

Illustration at degree 2 of the points that are handled in this section:
#+begin_src python :eval no-export :exports results
<<Textual squarified net>>
<<quarter_rep>>
print(SquareNet(2, list(range(3)), quarters={1}, show_axis=True, point_rep=quarter_rep))
#+end_src

#+RESULTS:
#+begin_src text :minipage
   ^
+4 |  +-------b-------+
+3 |  1 1 1 1 1       |
+2 |  1 1 1 1 1       |
+1 |  1 1 1 1 1       |
 0 |  +-------o-------+
-1 |  |       |       |
-2 |  |       |       |
-3 |  |       |       |
-4 |  +-------+-------+
   +-------------------->
      4 3 2 1 0 1 2 3 4
      - - - -   + + + +
#+end_src
\\
Legend:
 - =o= :: Origin, aka north pole.
 - =b= :: Corner 1.
 - =1= :: Points of degree greater than 0.
# Hello there.

#+name: Index of corner 1
#+begin_src cpp
return 3;
#+end_src

The other indexes can be computed in a similar way to quarter 0, with the following twists:
 1. =i= and =j= are swapped because quarter 1 is rotated left compared to quarter 0.
 2. =i= is negated because it is negative.
 3. =quarter_rectangle_cardinality= is added to the index to take the first quarter into account.
#+name: Index of quarter 1 degree > 0
#+begin_src cpp
return quarter_rectangle_width * -i + j + 5 + quarter_rectangle_cardinality;
#+end_src

*** Quarter 2

Illustration at degree 2 of the points that are handled in this section:
#+begin_src python :eval no-export :exports results
<<Textual squarified net>>
<<quarter_rep>>
print(SquareNet(2, list(range(3)), quarters={2}, show_axis=True, point_rep=quarter_rep))
#+end_src

#+RESULTS:
#+begin_src text :minipage
   ^
+4 |  +-------+-------+
+3 |  |       |       |
+2 |  |       |       |
+1 |  |       |       |
 0 |  c-2-2-2-o-------+
-1 |  | 2 2 2 |       |
-2 |  | 2 2 2 |       |
-3 |  | 2 2 2 |       |
-4 |  +-2-2-2-+-------+
   +-------------------->
      4 3 2 1 0 1 2 3 4
      - - - -   + + + +
#+end_src
\\
Legend:
 - =o= :: Origin, aka north pole.
 - =c= :: Corner 2.
 - =2= :: Points of degree greater than 0.

#+name: Index of corner 2
#+begin_src cpp
return 4;
#+end_src

This time, =i= and =j= are no longer swapped when compared to quarter 0 but they both have to be negated.
#+name: Index of quarter 2 degree > 0
#+begin_src cpp
return quarter_rectangle_width * -j -i + 5 + 2 * quarter_rectangle_cardinality;
#+end_src

*** Quarter 3

Illustration at degree 2 of the points that are handled in this section:
#+begin_src python :eval no-export :exports results
<<Textual squarified net>>
<<quarter_rep>>
print(SquareNet(2, list(range(3)), quarters={3}, show_axis=True, point_rep=quarter_rep))
#+end_src

#+RESULTS:
#+begin_src text :minipage
   ^
+4 |  +-------+-------+
+3 |  |       |       |
+2 |  |       |       |
+1 |  |       |       |
 0 |  +-------o-------+
-1 |  |       3 3 3 3 3
-2 |  |       3 3 3 3 3
-3 |  |       3 3 3 3 3
-4 |  +-------d-------+
   +-------------------->
      4 3 2 1 0 1 2 3 4
      - - - -   + + + +
#+end_src
\\
Legend:
 - =o= :: Origin, aka north pole.
 - =d= :: Corner 3.
 - =3= :: Points of degree greater than 0.

#+name: Index of corner 3
#+begin_src cpp
return 5;
#+end_src

#+name: Index of quarter 3 degree > 0
#+begin_src cpp
return quarter_rectangle_width * i -j + 5 + 3 * quarter_rectangle_cardinality;
#+end_src


** Indexing example

The code below prints a squarenet shadow whose individual points are the actual point itself, each point having been initialised to its own character.
Therefore, beyond being a usage example, this is also a pretty good illustration of the storage order.

#+begin_src cpp :eval no-export :exports both
<<include(":noweb octasierp print_squarenet_shadow")>>
int main() {
    octasierp octa(2, '0');
    std::string representation("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ/*-+");
    int i = 0;
    for(auto& point: octa) {
        point = representation[i];
        ++i;
    }
    print_squarenet_shadow(octa.bound(), 6, [&octa](int i, int j){
        return octa.point(i, j);
    });
}
#+end_src

#+RESULTS:
#+begin_src text :minipage
. . . . . . . . . . . . .
. . . . . . . . . . . . .
. . . . . . 3 i j k 1 . .
. . z w t q n f g h . . .
. . y v s p m c d e . . .
. . x u r o l 9 a b . . .
. . 4 C B A 0 6 7 8 2 . .
. . . F E D P S V Y * . .
. . . I H G Q T W Z - . .
. . . L K J R U X / + . .
. . . O N M 5 . . . . . .
. . . . . . . . . . . . .
. . . . . . . . . . . . .
#+end_src


** Quarter rotation

A key notion when manipulation octasierps is that of construction by rotation, meaning that operations can often be defined for quarter 0 and then be applied to the other quarters by rotation.
This section's goal is to transform this notion of construction by rotation from an analytical tool to a programming one.

There is a lot of strange details with very generic names in this implementation so most of it will go inside the namespace =quarter_rotation_details=.

#+name: quarter_rotation_details
#+begin_src cpp :minipage
namespace quarter_rotation_details {
<<quarter_rotation_details/public>>
} // quarter_rotation_details
#+end_src

*** Directed axes

Since quarters 1, 2, 3 are successive left rotations of quarter 0, moving a point in a given direction will have a different meaning depending on the quarter.
For example, quarter 2 is the exact opposite of quarter 1.
This means that incrementing x in quarter 2 is like decrementing it in quarter 0.

The first step toward supporting this behaviour is directed axes, implemented in =natural_axis= and =inverted_axis=.
The =value_= stored is not directly accessible on purpose, as those classes are only meant to represent operations on an axis.
#+begin_src cpp :noweb-ref quarter_rotation_details/public
enum class direction {natural, inverted};
template<direction Dir> class axis {
  public:
    axis(int value):
        value_(value)
    {}

    int operator++();
    int operator--();

  private:
    int value_;
};

template<> int axis<direction::natural>::operator++()
{++value_; return value_;}
template<> int axis<direction::natural>::operator--()
{--value_; return value_;}

template<> int axis<direction::inverted>::operator++()
{--value_; return value_;}
template<> int axis<direction::inverted>::operator--()
{++value_; return value_;}

using natural_axis = axis<direction::natural>;
using inverted_axis = axis<direction::inverted>;
#+end_src

Usage:
#+begin_src cpp :eval no-export :exports both
<<include(":noweb quarter_rotation_details/public print")>>

int main() {
    inverted_axis inv(23);
    natural_axis nat(8);
    for(int i = 42/4; i <= 16; ++i) { // That is seven incrementations.
        ++inv;
        ++nat;
    }
    print{++inv, ++nat};
}
#+end_src

#+RESULTS:
#+begin_src text :minipage
15 16
#+end_src

Don't pay too much attention to the numbers, what important is that =inv= is only incremented but ends up smaller because it is inverted.

*** Quarter reference frame

=QRF= (Quarter Reference Frame) builds upon the directed axes to provide a way to represent operations on each quarter, vis-a-vis quarter 0, the canonical reference frame.

#+begin_src cpp :noweb-ref quarter_rotation_details/public
// Quarter Reference Frame
template<int Id>
struct QRF {};

template<> struct QRF<0> {
    natural_axis x;
    natural_axis y;
};

template<> struct QRF<1> {
    inverted_axis y;
    natural_axis x;
};

template<> struct QRF<2> {
    inverted_axis x;
    inverted_axis y;
};

template<> struct QRF<3> {
    natural_axis y;
    inverted_axis x;
};
#+end_src
The replacement of a =natural_axis= by an =inverted_axis= and /vice versa/ represents an inversion of this axis.
More subtly, the swapping of the axes is encoded in their order.

For example, where =QRF<0>= is laid out as ={x, y}=, =QRF<1>= is laid out as ={-y, x}= because that is what happens when going from quarter 0 from quarter 1.
The axes are rotated 90\textdegree{} left, thus the x axis is now the y axis and the y axis is now the opposite the x axis.
In other words, the axes have been swapped and what was the x axis but is now the y axis must be negated.

See below for an illustration of this situation:
#+begin_src text :minipage
Quarter 0 (x, y):

         ^ y
         |
         |
  -------+------>
         |      x
         |
         |

___________________

#+end_src
#+begin_src text :minipage

Quarter 1 (x', y'):

         ^ x' = y
         |
         |
  <------+-------
 y' = -x |
         |
         |
#+end_src


\\
The following template will be useful to extract the quarter represented by a given =QRF=:
#+begin_src cpp :noweb-ref quarter_rotation_details/public :minipage
template<typename QRF_>
struct QRF_quarter;

template<int Quarter>
struct QRF_quarter<QRF<Quarter>> {enum {v = Quarter};};
#+end_src

\\
This code block below recapitulates the usage of everything that has been defined up to now in this section:
#+begin_src cpp :eval no-export :exports both
<<include(":noweb quarter_rotation_details print print_size")>>

using namespace quarter_rotation_details;

template<int Quarter>
struct point_quarter {
    union {
        QRF<Quarter> axes;
        struct {
            const int x;
            const int y;
        };
    };
};

template<int Quarter, typename Lambda>
void apply_on_origin(Lambda lambda) {
    point_quarter origin{QRF<Quarter>{0, 0}};
    lambda(origin);
}

int main() {
    auto axes_direction = [] <typename T> (T& point) {
        ++point.axes.x;
        ++point.axes.y;
        char x_sign = point.x > 0 ? '+': '-';
        char y_sign = point.y > 0 ? '+': '-';
        print{{.sep="", .end="    "}}(
            "Quarter ", QRF_quarter<decltype(T::axes)>::v,
            " (", x_sign, "x, ", y_sign, "y)"
        );
        print_size<T>();
    };
    apply_on_origin<0>(axes_direction);
    apply_on_origin<1>(axes_direction);
    apply_on_origin<2>(axes_direction);
    apply_on_origin<3>(axes_direction);
}
#+end_src

#+RESULTS:
#+begin_src text :minipage
Quarter 0 (+x, +y)    point_quarter<0> -> 8 bytes (64 bits)
Quarter 1 (-x, +y)    point_quarter<1> -> 8 bytes (64 bits)
Quarter 2 (-x, -y)    point_quarter<2> -> 8 bytes (64 bits)
Quarter 3 (+x, -y)    point_quarter<3> -> 8 bytes (64 bits)
#+end_src
\\

There is a lot to unpack from this usage example.
 - The intended way to access the value of a =QRF= is to store it in a union alongside an anonymous struct containing two constant ints.
   Since members of a union share the same layout, those ints map the ones stored in the =QRF= axes.

   This is where the inversion of the axes order in the =QRF= becomes pertinent because when this order is inverted, the anonymous struct is not inverted.
   Therefore in those cases, the struct's =x= maps to the =QRF='s =y= and /vice versa/, thus reflecting the swapped axes caused by the rotation.

 - A templated lambda can be used to apply operations transparently on a given quarter referential.
   In this instance, the lambda is used to show the orientation of the axes of each quarter referential, as well as the size of the lambda parameter.

*** Id of the left, back and right quarters

Since quarters are numbered using successive left rotations from quarter 0, the id of the quarter to its left, its back and its right can be obtained by adding respectively 1, 2 and 3.
And since they wrap around after quarter 3, applying modulo 4 makes this approach work for all 4 quarters.
#+begin_src cpp :noweb-ref quarter_rotation_details/public
template<int quarter>
constexpr int left_quarter() {
    return (quarter + 1) % 4;
}

template<int quarter>
constexpr int back_quarter() {
    return (quarter + 2) % 4;
}

template<int quarter>
constexpr int right_quarter() {
    return (quarter + 3) % 4;
}
#+end_src

*** Quarter coordinates

Quarter coordinates are represented using the technique of the anonymous union exposing a =QRF='s true =x= and =y= values with the left, back and right rotation of the quarter also included.
It should be noted that the constructor always takes values from the canonical quarter, even if the =Quarter= template parameter is something else that 0.

#+begin_src cpp :noweb-ref quarter_rotation_details/public :minipage
<<coordinates<Quarter>/pre>>
template<int Quarter>
struct coordinates {
    static constexpr int main_id = Quarter;
    static constexpr int left_id = left_quarter<Quarter>();
    static constexpr int back_id = back_quarter<Quarter>();
    static constexpr int right_id = right_quarter<Quarter>();

    union {
        QRF<main_id> main;
        QRF<left_id> left;
        QRF<back_id> back;
        QRF<right_id> right;
        struct {
            const int x;
            const int y;
        };
        <<coordinates<Quarter>/union>>
    };

    coordinates(int _x, int _y): x(_x), y(_y) {}
    coordinates(): coordinates(0, 0) {}
    <<coordinates<Quarter>/public>>
};
#+end_src

Verification of the correctness of the rotations:
#+begin_src cpp :eval no-export :exports both :minipage
<<include(":noweb quarter_rotation_details print")>>

using namespace quarter_rotation_details;

template<int Quarter>
void print_quarter_layout() {
    print{
        "quarter", Quarter,
        "main:", coordinates<Quarter>::main_id,
        "left:", coordinates<Quarter>::left_id,
        "back:", coordinates<Quarter>::back_id,
        "right:", coordinates<Quarter>::right_id,
    };
}

int main() {
    print_quarter_layout<0>();
    print_quarter_layout<1>();
    print_quarter_layout<2>();
    print_quarter_layout<3>();
    return 0;
}
#+end_src

#+RESULTS:
#+begin_src text :minipage
quarter 0 main: 0 left: 1 back: 2 right: 3
quarter 1 main: 1 left: 2 back: 3 right: 0
quarter 2 main: 2 left: 3 back: 0 right: 1
quarter 3 main: 3 left: 0 back: 1 right: 2
#+end_src

\\
Everything is as expected.

*** Rotation of the quarter coordinates

Rotating quarter coordinates requires a read/write access to the storage so the anonymous union must be updated:
#+begin_src cpp :noweb-ref coordinates<Quarter>/union :minipage
struct {
    int __private_x;
    int __private_y;
};
#+end_src

The =rotate_left=, =rotate_back= and =rotate_right= methods reflect the axis-swapping-and-inverting logic of =QRF= but in a dynamic manner, acting on stored values, where =QRF='s logic is statically embedded in the type of its members and the order of its layout.
Those methods are equivalent to applying respectively one, two or three rotations.
#+begin_src cpp :noweb-ref coordinates<Quarter>/public :minipage
void rotate_left()  {rotate<1>(*this);}
void rotate_back()  {rotate<2>(*this);}
void rotate_right() {rotate<3>(*this);}
#+end_src

The actual implementation of 1, 2, and 3 (and 0) rotations is a bit painful because it is a specialisation of a templated method within a templated class, with the inner template argument having to be specialised while the outer template argument should stay generic.
I found no better way than to do that than using a helper templated struct with the templates reversed, i.e. the inner template becomes the outer one and /vice versa/.
#+begin_src cpp :noweb-ref coordinates<Quarter>/pre :minipage
template<int Rotations>
struct rotate_impl {template<typename T> static void f(T&);};
template<> struct rotate_impl<0> {
    template<typename T> static void f(T& coord) {}
};
template<> struct rotate_impl<1> {
    template<typename T> static void f(T& coord) {
        coord.__private_y = -coord.__private_y;
        std::swap(coord.__private_x, coord.__private_y);
    }
};
template<> struct rotate_impl<2> {
    template<typename T> static void f(T& coord) {
        coord.__private_x = -coord.__private_x;
        coord.__private_y = -coord.__private_y;
    }
};
template<> struct rotate_impl<3> {
    template<typename T> static void f(T& coord) {
        coord.__private_x = -coord.__private_x;
        std::swap(coord.__private_x, coord.__private_y);
    }
};

template<int Rotations, typename T>
void rotate(T& coords) {
    rotate_impl<Rotations>::f(coords);
}
#+end_src

This redirection operator can be used to print coordinates:
#+begin_src cpp :noweb-ref quarter_rotation_details/public
template<int Quarter>
std::ostream& operator<<(std::ostream& os, const coordinates<Quarter>& c) {
    os << "(";
    if(c.x >= 0)
        os << '+'; // To better align coordinates.
    os << c.x << ", ";
    if(c.y >= 0)
        os << '+';
    return os << c.y << ")";
}
#+end_src

The following usage example shows the equivalency between the rotation encoded in the structure of =QRF= and the one enacted on the state by the rotation methods:
#+begin_src cpp :eval no-export :exports both :minipage
<<include(":noweb quarter_rotation_details print")>>

using namespace quarter_rotation_details;

template<int Quarter>
void demonstrate_rotation() {
    print{};
    print{"-----------------------"};
    print{"Quarter", Quarter};
    coordinates<Quarter> point(0, 0);
    auto copy = point;
    for(int i = 0; i < 4; ++i) {
        ++point.main.x;
        ++copy.left.x;
    }
    print{"Main incremented:", point};
    print{"Left incremented:", copy};
    copy.rotate_right();
    print{"Rotated right:   ", copy};
}

int main() {
    demonstrate_rotation<0>();
    demonstrate_rotation<1>();
    demonstrate_rotation<2>();
    demonstrate_rotation<3>();
    return 0;
}
#+end_src

#+RESULTS:
#+begin_src text :minipage

-----------------------
Quarter 0
Main incremented: (+4, +0)
Left incremented: (+0, +4)
Rotated right:    (+4, +0)

-----------------------
Quarter 1
Main incremented: (+0, +4)
Left incremented: (-4, +0)
Rotated right:    (+0, +4)

-----------------------
Quarter 2
Main incremented: (-4, +0)
Left incremented: (+0, -4)
Rotated right:    (-4, +0)

-----------------------
Quarter 3
Main incremented: (+0, -4)
Left incremented: (+4, +0)
Rotated right:    (+0, -4)
#+end_src

*** Constructors and assignment operators

The copy constructor and a copy assignment operator are not generated automatically, presumably because of the union.
The fact that they work regardless of the quarter of both objects is not a problem because the stored coordinates are all relative to quarter 0 anyway.
The goal of the =Quarter= template parameter is to encode behaviour, not state.

#+begin_src cpp :noweb-ref coordinates<Quarter>/public :minipage
template<int OtherQuarter>
coordinates(const coordinates<OtherQuarter>& other):
    x(other.x), y(other.y)
{}

template<int OtherQuarter>
coordinates& operator=(const coordinates<OtherQuarter>& other) {
    __private_x = other.x;
    __private_y = other.y;
    return *this;
}
#+end_src


*** Exposed API

The quarter coordinates implemented in the previous sections is exposed to the outside world as =qoords= (=quarter_coordinates= was too long for my taste).
#+name: qoords
#+begin_src cpp :minipage
template<int Quarter>
using qoords = quarter_rotation_details::coordinates<Quarter>;
#+end_src
#+depends:qoords :noweb quarter_rotation_details

Usage:
#+begin_src cpp :eval no-export :exports both
<<include(":noweb qoords print")>>

int main() {
    qoords<0> a(16, -16);
    print{"Original:        ", a};
    --a.back.y;
    print{"Back decremented:", a};
    a.rotate_left();
    print{"Rotated left:    ", a};
}
#+end_src

#+RESULTS:
#+begin_src text :minipage
Original:         (+16, -16)
Back decremented: (+16, -15)
Rotated left:     (+15, +16)
#+end_src

*** =foreach_quarter=

The function presented here is what motivated this whole quarter rotation system in the first place.
By using it, iteration logic can be defined for quarter 0 only and applied to the other quarters by rotation, sparing a lot of implementation headaches.
To be honest only future implementation headaches have been spared because coding this was one hell of a ride.

It accepts a lambda to apply on every quarter and the initial coordinates of the points to be transmitted to this lambda, which will be called back for quarters 0, 1, 2 and 3, with the points rotated accordingly.

#+name: foreach_quarter
#+begin_src cpp
template<typename Lambda, typename... Coordinates>
void foreach_quarter(Lambda lambda, const Coordinates&... initial_coordinates) {
    using namespace foreach_quarter_details;
    rotate_and_apply_lambda<0>(lambda, initial_coordinates...);
    rotate_and_apply_lambda<1>(lambda, initial_coordinates...);
    rotate_and_apply_lambda<2>(lambda, initial_coordinates...);
    rotate_and_apply_lambda<3>(lambda, initial_coordinates...);
}
#+end_src
#+depends:foreach_quarter :noweb foreach_quarter_details

The more technical bits are hidden under =foreach_quarter_details=.
=rotated_coordinates= is a template closure capturing a rotation value, destined to be applied to every =Coordinates= via =meta::steall_auto=.
For example, if =Coordinates...= is in fact =qoords<2>, qoords<3>= and =Rotations= is 2, =coordinates_tuple= will be =std::tuple<qoords<0>, qoords<1>>=.

This takes care of the types of each =qoords= after rotation, i.e. their behaviour when incremented and decremented.
The states are then copied from the initial coordinates and set to their proper place by applying the correct number of rotations and finally the lambda is called.

#+name: foreach_quarter_details
#+begin_src cpp
namespace foreach_quarter_details {
using namespace quarter_rotation_details;
template<int Rotations>
struct rotated_coordinates {
    template<int Quarter>
    using t = coordinates<(Quarter + Rotations) % 4>;
};

template<int Rotations, typename Lambda, typename... Coordinates>
void rotate_and_apply_lambda(Lambda lambda, const Coordinates&... initial_coordinates) {
    using coordinates_tuple = meta::stealall_auto<
        std::tuple,
        rotated_coordinates<Rotations>::template t,
        Coordinates...
    >;
    coordinates_tuple coordinates(initial_coordinates...);
    foreach_tuple(
        [](auto& point) {rotate<Rotations>(point);},
        coordinates
    );
    std::apply(lambda, coordinates);
}
} // namespace foreach_quarter_details
#+end_src
#+depends:foreach_quarter_details :noweb meta::stealall_auto quarter_rotation_details foreach_tuple

Usage:
#+begin_src cpp :eval no-export :exports both
<<include(":noweb foreach_quarter print print_size qoords")>>

int main() {
    foreach_quarter([]<typename T>(T& a, T& b) {
        print_size<T>();
        print{a, "->", b};
    }, qoords<0>(-8, 4), qoords<0>(-16, 15));
}
#+end_src

#+RESULTS:
#+begin_src text :minipage
quarter_rotation_details::coordinates<0> -> 8 bytes (64 bits)
(-8, +4) -> (-16, +15)
quarter_rotation_details::coordinates<1> -> 8 bytes (64 bits)
(-4, -8) -> (-15, -16)
quarter_rotation_details::coordinates<2> -> 8 bytes (64 bits)
(+8, -4) -> (+16, -15)
quarter_rotation_details::coordinates<3> -> 8 bytes (64 bits)
(+4, +8) -> (+15, +16)
#+end_src



** Binary degree

A naive C++ implementation of the binary degree function will look like this:
#+name: naive_bindeg
#+begin_src cpp :minipage
unsigned int naive_bindeg(unsigned int index, unsigned int degree) {
    if(index % 2 == 1 || degree == 0)
        return degree;
    return naive_bindeg(index >> 1, degree - 1);
}
#+end_src

Usage:
#+begin_src cpp :eval no-export :wrap "src text :minipage" :exports both :minipage
<<include(":noweb naive_bindeg print")>>

int main() {
    unsigned int degree = 3;
    unsigned int rightmost = 1 << degree;
    for(unsigned int i = 0; i <= rightmost; ++i) {
        print{{.sep=""}}("bindeg(", i, ", ", degree, ") = ", naive_bindeg(i, degree));
    }
    return 0;
}
#+end_src

#+RESULTS:
#+begin_src text :minipage
bindeg(0, 3) = 0
bindeg(1, 3) = 3
bindeg(2, 3) = 2
bindeg(3, 3) = 3
bindeg(4, 3) = 1
bindeg(5, 3) = 3
bindeg(6, 3) = 2
bindeg(7, 3) = 3
bindeg(8, 3) = 0
#+end_src

The binary degree function will be fundamental to point indexation in an octasierp and can probably be optimised using =<strings.h>='s =ffs= (find first set).


* Diagrams generation

The diagrams are generated in python, using Gizeh for the geometry and =moviepy= for stiching images together into animations, inspired by this [[http://zulko.github.io/blog/2014/09/20/vector-animations-with-python/][blogpost]].

They can be installed via pip:
#+begin_src bash :eval never
pip install --user gizeh moviepy
#+end_src


Images are saved in the =images= folder and the scripts are supposed to be executed (that is to say after they have been tangled) from the root of the project like so:
#+begin_src bash
./script/your-favorite-script.sh
#+end_src

** Colors
:PROPERTIES:
:header-args:python+: :noweb-ref "Colors"
:END:

I use a =SimpleNamespace= to store some colors that I want to use (the names are probably innacurate).
The obvious alternative would be to use a =class= but that would be tedious to initialize, or a =dict= but I want to be able to access members through the dot operator.

#+begin_src python
from types import SimpleNamespace
colors = SimpleNamespace(
    canard=(0, .6, .6),
    turquoise=(0, 1, 1),
    orange=(1, .5, 0),
    mandarine=(1, .8, 0),
    purple=(.4, 0, .4),
    violet=(.6, .2, .6),
    black=(0, 0, 0),
    evergrey=(.5, .5, .5),
    white=(1, 1, 1),
    forest=(0, .4, 0),
    grass=(0, .6, .2),
    ocean=(0, .2, .8),
    river=(0, .4, .8),
    air=(0, 0, 0, 0)
)
#+end_src

Here are some color palettes:

#+begin_src python
palette_colorful = [
    (colors.canard, colors.turquoise),
    (colors.purple, colors.violet),
    (colors.orange, colors.mandarine),
    (colors.black, colors.white),
    (colors.black, colors.white)
]
palette_gfg = [
    (colors.white, colors.canard),
    (colors.canard, colors.purple),
    (colors.purple, colors.orange),
    (colors.orange, colors.black),
    (colors.black, colors.white)
]
palette_gfgpoints = [
    (colors.air, colors.canard),
    (colors.air, colors.purple),
    (colors.air, colors.orange),
    (colors.air, colors.evergrey),
    (colors.air, colors.air),
    (colors.air, colors.canard)
]
palette_psyche = [
    (colors.canard, colors.white),
    (colors.orange, colors.white),
    (colors.purple, colors.white),
    (colors.black, colors.white),
    (colors.black, colors.white),
]
#+end_src


** Basic =Geometry=
:PROPERTIES:
:header-args:python+: :noweb-ref "Geometric primitives"
:END:

The class =Geometry= is here to provide an abstraction about the way a subdivided object is to be drawn.
For the moment, geometric primitives only have two caracteristics at a given degree of subdivision :
 - their color as a tuple of three or four floats =(r, g, b)= or =(r, g, b, a)=, and
 - their size as a factor by which to multiply a reference size.

Thus, =Geometry= is initialised with:
 - A color palette (a list of colors).
 - A size policy (a function  $f : \mathbb{N} \rightarrow \mathbb{R}^+$ associating a subdivision degree to a desired size).

The geometry parameters for degree $d$ can then simply be obtained with square brackets indexing (like =geometry[d]=), thanks to the method =__getitem__=.

#+begin_src python
class Geometry(object):
    def __init__(self,
                 degree,
                 color_palette=[(0, 0, 0)],
                 size_policy=None
    ):
        self.color_palette = color_palette
        if size_policy is None:
            self.size_policy = decrease_size_linearly(degree)
        else:
            self.size_policy = size_policy

    def __getitem__(self, current):
        return self.color_palette[current % len(self.color_palette)],\
            self.size_policy(current)
#+end_src

*** Decrease size linearly

The default element size policy is to decrease the size of a primitive linearly with the degree of subdivision.
Thus, the aim of this policy is to provide a factor $factor_{current}$ by which to multiply an initial size such that $1 \geq factor_{current} \geq minFactor$, where $current$ is the current degree of subdivision.

We know that $factor_0 = 1$ and $factor_{degree} = minFactor$.
Since we want to decrease the size linearly, we also know that $factor_{current} = a \times current + b$, thus

\begin{equation*}
  \begin{cases}
    a \times 0 + b = 1 & \Leftrightarrow b = 1\\
    a \times degree + b = minFactor & \Leftrightarrow a = \frac{minFactor -1}{degree}
  \end{cases}
\end{equation*}

We finally obtain the function $factor_{current} = \frac{minFactor - 1}{degree} \times current + 1$.
This function is not defined when $degree = 0$ so this needs to be addressed as a special case.

After playing a bit with the $minFactor$ value, it looks like .25 is a good value.

#+begin_src python
def decrease_size_linearly(degree, min_factor=.25, scale=1):
    def result(current):
        if degree == 0:
            return 1
        return (current * (min_factor - 1) / degree + 1) * scale
    return result
#+end_src

I added a =scale= parameter to easily be able to make things bigger while keeping the linear relationship between degrees.


** Triangle
:PROPERTIES:
:header-args:python+: :eval never
:END:

A =Triangle= represents one of the triangles of an octasierp net, its properties are:
#+attr_latex: :float left :center nil
| -- =degree=:          | The degree of subdivision.                              |
| -- =initial_width=:   | The width of the first element.                         |
| -- =points_geometry=: | =Geometry= object describing how points are to be drawn |
| -- =lines_geometry=:  | =Geometry= object describing how lines are to be drawn  |

A =Triangle= has no coordinates of its own because the coordinates of its constituent points will be used in =generate=, whose role is to create a Gizeh object representing the geometry of the triangle, whereas =geometry= does the recursive calculations regarding all the points and lines of the final figure.
In =__init__=, a value of =0= is used to represent the default geometry which is a color palette of black and a size policy of linear decrease.
=None= is not used because it means to not draw anything.

#+begin_src python :noweb-ref "Triangle"
import gizeh as gz

<<Geometric primitives>>

class Triangle(object):
    def __init__(self, degree, initial_width, points_geometry=0, lines_geometry=0, background_color=None):
        self.degree = degree
        self.initial_width = initial_width
        if points_geometry == 0:
            self.points_geometry = Geometry(degree)
        else:
            self.points_geometry = points_geometry
        if lines_geometry == 0:
            self.lines_geometry = Geometry(degree)
        else:
            self.lines_geometry = lines_geometry
        self.background_color = background_color

    def generate(self, a, b, c):
        points, lines = self.geometry(a, b, c)
        if self.background_color is not None:
            lines.insert(0, self.make_background(a, b, c))
        return gz.Group(lines + points)

    def geometry(self, a, b, c, current=0):
        lines = self.make_lines(a, b, c, current)
        points = self.make_points(a, b, c, current)
        <<Subdivise triangle>>

    <<Triangle/>>
#+end_src

*** Lines, points and background generation

The lines characteristics at a given level are deduced from the dedicated geometry object:
#+begin_src python :noweb-ref Triangle/
def make_lines(self, a, b, c, current):
    if self.lines_geometry is None:
        return []
    color, factor = self.lines_geometry[current]
    width = max(1, self.initial_width * factor)
    return [gz.polyline(
        [a, b, c],
        close_path=True,
        stroke_width=width,
        stroke=color
    )]
#+end_src

A similar approach is done for points, with two differences:
 1. They are scaled a bit ($\times 1.2$) because they are used to hide the corners of lines.
 2. They are generated via translation.
#+begin_src python :noweb-ref Triangle/
def make_points(self, a, b, c, current):
    if self.points_geometry is None:
        return []
    color, factor = self.points_geometry[current]
    width = max(1, self.initial_width * factor * 1.2)
    point = gz.circle(r=width, fill=color)
    return list(map(point.translate, (a, b, c)))
#+end_src

Background generation is similar to lines generation, except that the lines are drawn and the fill color is set to =background_color=.
#+begin_src python :noweb-ref Triangle/
def make_background(self, a, b, c):
    return gz.polyline(
        [a, b, c],
        close_path=True,
        stroke_width=0,
        fill=self.background_color
    )
#+end_src

*** Subdivise triangle
:PROPERTIES:
:header-args:python+: :noweb-ref "Subdivise triangle"
:END:

Now that the geometric elements have been dealt with, only the recursive calls - or lack thereof - remains.
The generation is over when the maximal degree has been reached:
#+begin_src python
if current == self.degree:
    return points, lines
#+end_src

Otherwise, we make recursive calls to =geometry=, using the midpoints of the three original points.
The order of the points and of the lines is important because the graphical elements are drawn in the order of their apparition and we want to make sure that the earliest subdivisions are drawn over the subsequent ones.
#+begin_src python
ab = midpoint(a, b)
ac = midpoint(a, c)
bc = midpoint(b, c)
for sierpinski in [(a, ab, ac), (b, ab, bc), (c, ac, bc), (ab, ac, bc)]:
    recurse_points, recurse_lines = self.geometry(*sierpinski, current + 1)
    lines = recurse_lines + lines # order is important
    points = recurse_points + points
return points, lines
#+end_src

With =midpoint= being defined as:
#+begin_src python :noweb-ref "Triangle"
def midpoint(left, right):
    return ((left[0] + right[0]) / 2, (left[1] + right[1]) / 2)
#+end_src


** Octasierp net

=Octanet= represent the net of an octasierp through its evolution from an octahedron to a quasi-squaregrid.
This evolution will be tracked through a =progress= parameter:
 - When $progress = 0$, it is octahedron net shaped.
 - When $progress = 1$, it is quasi-squaregrid shaped.
 - When $0 < progress < 1$, its shape is deduced by interpolating the value of the central angle.

Below is the basic structure of this class and its dependencies.
The sections below will fill the missing parts in =<<Before Octanet>>= and =<<Octanet/>>=.

#+name: Octanet
#+begin_src python
<<Triangle>>
<<Colors>>

import math

<<Before Octanet>>

class Octanet(object):
    <<Octanet/>>
#+end_src

*** Computations independant of progress

Everything that does not depend on =progress= is computed in =__init__=:
#+begin_src python :noweb-ref Octanet/
def __init__(
        self, scale, degree=0, points_geometry=0, lines_geometry=0,
        triangle_background=None, surface_parameters={}
):
    self.degree = degree
    self.side = int(50 * scale) # Bugs may arise at very low scale.
    stroke_width = scale
    horizontal_margin = int(5 * scale)
    vertical_margin = int(15 * scale)

    altitude = math.sqrt(3) * (self.side / 2)
    width = int(4 * altitude)
    height = 2 * self.side
    left = horizontal_margin
    right = width + horizontal_margin
    bottom = height + vertical_margin

    self.x_ab = (left + right) /2
    self.y_a = bottom - self.side / 2
    self.y_b = bottom - self.side * 1.5

    self.surface_parameters = {
        'width': width + 2 * horizontal_margin,
        'height': height + 2 * vertical_margin,
        'bg_color': (1, 1, 1)
    }
    self.surface_parameters.update(surface_parameters)

    triangle = Triangle(
        degree, stroke_width,
        points_geometry=points_geometry, lines_geometry=lines_geometry,
        background_color=triangle_background
    )
    self.triangles = triangle.generate
#+end_src

*** Net construction according to progress

=make_net= uses basic trigonometry to compute the coordinate of the first quarter at the desired =progress= value.
This quarter is then cloned and rotated three times to form the complete figure.

#+begin_src python :noweb-ref Octanet/
def make_net(self, progress):
    vertical_correction = progress * self.side / 2
    angle = math.pi / 3 + progress * (math.pi / 6)

    y_a = self.y_a - vertical_correction
    y_b = self.y_b - vertical_correction
    a = (self.x_ab, y_a)
    b = (self.x_ab, y_b)

    cosa = math.cos(angle)
    sina = math.sin(angle)

    x_c = -sina * (y_b - y_a) + self.x_ab
    y_c = cosa * (y_b - y_a) + y_a
    c = (x_c, y_c)

    t1 = self.triangles(a, b, c)
    twin_point = ((self.x_ab + x_c) / 2, (y_b + y_c) / 2)
    t2 = t1.rotate(math.pi, twin_point)

    first_quarter = gz.Group([t1, t2])
    second_quarter = first_quarter.rotate(-angle, a)
    third_quarter = first_quarter.rotate(-2 * angle, a)
    fourth_quarter = first_quarter.rotate(angle, a)

    return gz.Group([first_quarter, second_quarter, third_quarter, fourth_quarter])
#+end_src

*** Surface creation and export

=draw= creates a Gizeh surface, draws the =Octanet= on it and returns it.
This Gizeh surface can be manipulated directly, or can be directly saved to a png.
#+begin_src python :noweb-ref Octanet/
def draw(self, progress=0):
    surface = gz.Surface(**self.surface_parameters)
    self.make_net(progress).draw(surface)
    return surface

def write_to_png(self, filename, progress=0):
    self.draw(progress).write_to_png(filename)
#+end_src

Writing to svg requires a different surface, not given directly by Gizeh.
#+begin_src python :noweb-ref Octanet/
def write_to_svg(self, filename, progress=0):
    surface = SVGSurface(filename, **self.surface_parameters)
    self.make_net(progress).draw(surface)
    surface.finish()
#+end_src

Below is defined the surface in question.
This is almost copy-pasted from Gizeh's own =PDFSurface=.
#+begin_src python :noweb-ref "Before Octanet"
import cairocffi as cairo
class SVGSurface(object):
    def __init__(self, filename, width, height, bg_color=None):
        self.width = width
        self.height = height
        self._cairo_surface = cairo.SVGSurface(filename, width, height)
        if bg_color is not None:
            gz.rectangle(2 * width, 2 * height, fill=bg_color).draw(self)

    def get_new_context(self):
        return cairo.Context(self._cairo_surface)

    def flush(self):
        self._cairo_surface.flush()

    def finish(self):
        self._cairo_surface.finish()
#+end_src


** Illustration: degrees 0 through 3

We use the =Octanet= class defined above to create the 8 images corresponding to the degrees 0 through 3 of the octahedron and the quasi-square version:
#+begin_src python :tangle script/octasierp_net_0-3.py :eval no-export
<<Octanet>>

for degree in range(4):
    net = Octanet(scale=10, degree=degree)
    net.write_to_png('net_octa_degree_{}.png'.format(degree), 0)
    net.write_to_png('net_squa_degree_{}.png'.format(degree), 1)
#+end_src

The code above is then called by a bash script who annotates and stitches the images together with imagemagick's =mogrify= and =montage=:
#+begin_src bash :tangle script/illustration_0_through_3.sh :shebang "#!/usr/bin/env bash" :eval no-export :results silent
python3 script/octasierp_net_0-3.py

function make_montage(){
    base=net_${version}_degree_

    for degree in 0 1 2 3
    do
        mogrify -size 600x400 -pointsize 60\
                -annotate +770+$vertical "degree = $degree"\
                $base$degree.png
    done

    montage ${base}{0,1,2,3}.png -geometry 600x400 images/montage_${base}0-3.png
    # -background none
    rm ${base}{0,1,2,3}.png
}

mkdir -p images

version=octa
vertical=1165
make_montage

version=squa
vertical=1250
make_montage
#+end_src


** Logo creation

Yliss's logo is an octasierp net at degree 3 with big colorful points and no lines.
To achieve the big points, =decrease_size_linearly= is scaled 3 times and is slightly abused by initialising it with a degree of 4.
This makes the linear size decrease slightly less prononced.

#+name: Yliss logo definition
#+begin_src python :tangle script/animations.py
<<Octanet>>

degree = 3
light=[colors.canard, colors.purple, colors.orange, colors.evergrey]
colorful_oversized = Geometry(
    degree,
    color_palette=light,
    size_policy=decrease_size_linearly(degree=4, scale=3)
)
yliss_logo = Octanet(
    scale=10, degree=degree,
    lines_geometry=None,
    points_geometry=colorful_oversized,
    triangle_background=colors.black,
    surface_parameters={'bg_color': colors.air}
)
#+end_src

The definition above is reused to generate the proper logo, in its octahedral shape but also its quasi-squaregrid equivalent.
#+begin_src python :results silent :eval no-export
<<Yliss logo definition>>
yliss_logo.write_to_svg('images/octahedron_logo.svg', 0)
yliss_logo.write_to_svg('images/square_logo.svg', 1)
yliss_logo.write_to_png('images/octahedron_logo.png', 0)
yliss_logo.write_to_png('images/square_logo.png', 1)
#+end_src

#+caption: Octahedron net
[[file:images/octahedron_logo.png]]

#+caption: Octahedron as quasi square
[[file:images/square_logo.png]]

The logos are generated in svg and png.
I originally planned to use the svg version since it is scalable but I went against it because I felt it was too big:
#+begin_src bash :exports both :eval yes :wrap "src text :minipage"
du -sh images/{octahedron,square}_logo.{svg,png} | sort -rh
#+end_src

#+RESULTS:
#+begin_src text :minipage
776K	images/octahedron_logo.svg
640K	images/square_logo.svg
200K	images/octahedron_logo.png
100K	images/square_logo.png
#+end_src

Finally, using the same logo definition, an animation from octahedron to quasi-squarenet is stitched together:

#+begin_src python :results silent :eval no-export
<<Yliss logo definition>>

animation_duration = 1.5
freeze_duration = .5
total_duration = animation_duration + freeze_duration
fps = 30
def generate_frame(time):
    return yliss_logo.draw(time / animation_duration).get_npimage()

from multiprocessing import Pool
pool = Pool()

import numpy as np
frames = list(pool.map(
    generate_frame,
    np.linspace(0, animation_duration, int(fps * animation_duration))
))
pool.close()
pool.join()

idx = 0
def next_frame(_):
    global idx
    idx += 1
    return frames[idx - 1] if idx <= len(frames) else frames[-1]

from moviepy.editor import VideoClip
clip = VideoClip(next_frame, duration=total_duration)
clip.write_videofile('images/net_to_square_degree{}.mp4'.format(degree), fps=fps)
#+end_src


* Textual representation
:PROPERTIES:
:CUSTOM_ID: textual_quarter
:header-args:python+: :eval never
:END:


This section contains the implementation of the class used to produce the various ASCII-style representations of squarified-net quarters.
Here is a breakdown of the arguments accepted by Quarter's init:
 - =degree= is the degree of subdivision.
 - =appearance= is the degree of appearance to eventually display.
 - =quarter= is the index of the quarter (between 1 and 4).
 - =display_redundant= commands how redundant points should be shown in the representation.
 - =display_point= contains points representations for each degree.
   The last representation will be repeated through if the list is too short.

The inclusion of =appearance= in the arguments means that only points appearing at the degree =appearance= are included in the representation.
I'll explain later how to make a representation including all the points or only the points in a given list.

#+name: Textual quarter
#+begin_src python :noweb no-export
<<Textual quarter dependencies>>
<<Textual quarter utils>>

class Quarter:
    <<Textual quarter constants>>

    def __init__(
            self, degree, appearance=None, quarter=0,
            display_redundant=False, display_points=['x']
    ):
        self.degree = degree
        self.appearance = appearance
        self.quarter = quarter % 4
        self.display_redundant = display_redundant
        self.display_points = display_points
        self.valid_points = Quarter.IS_POINT | set(self.display_points)

        <<Textual quarter init>>

    <<Textual quarter methods>>

<<Textual quarter helper functions>>
#+end_src

** Character set

The character set used to describe a quarter is not supposed to be changed, that's why it is defined at the class level.
#+begin_src python :noweb-ref "Textual quarter constants"
HORIZONTAL = '-'
EMPTY = ' '
VERTICAL = '|'
CORNER = '+'
COLLISION = 'E'
REDUNDANT = 'v'
NORTH_POLE_POINT = 'X'
NORTH_POLE = 'o'
#+end_src
=CORNER= is not a great name because it already means the 4 corners of the world of an octasierp but here it is the litteral corners of one quarter (two of which happen to be corners in the octasierp sense).

We also define the set of character that can collide and the set of character that are a point.
They are complementary in the sense that their intersection is empty and their union is the whole character set.
#+begin_src python :noweb-ref "Textual quarter constants"
CAN_COLLIDE = {
    HORIZONTAL, EMPTY, VERTICAL,
    CORNER, NORTH_POLE
}
IS_POINT = {COLLISION, REDUNDANT, NORTH_POLE_POINT}
#+end_src

We want the caller to be able to select the redundant character.
This is done based on the value of =display_redundant= ; any value other than =True= will be interpreted as the an attempt to override the default redundant character.
#+begin_src python :noweb-ref "Textual quarter init"
if self.display_redundant is True:
    self.redundant = Quarter.REDUNDANT
elif self.display_redundant is not False:
    self.redundant = self.display_redundant
    self.valid_points.add(self.redundant)
#+end_src

Every degree of appearance must have its representation:
#+begin_src python :noweb-ref "Textual quarter init"
if self.appearance is None:
    max_appearance = 0
elif type(self.appearance) is int:
    max_appearance = self.appearance
elif type(self.appearance) is list:
    max_appearance = max(self.appearance)
else:
    raise TypeError('Unexpected appearance type: ' + type(self.appearance))

if len(self.display_points) < max_appearance + 1:
    self.display_points += self.display_points[-1:] * (max_appearance + 1 - len(self.display_points))
#+end_src


** Generate a raw representation

This method is the core of the text representation logic.
Its role is to create a string where every character except =\n= maps to the real corresponding point.
It should not be called by an end user, as it still needs to be prettyfied and it has its own =appearance= argument which restricts the representation to one specific degree of appearance.
The assembly steps required will be the subject of the next sections.

With that being said, this method is a perfect example of why designing code using (poorly) observed artifacts rather than carefully deduced knowledge will result in a terrible unmaintanable mess.
But hey, it works.

In retrospect, it would have been much better to start from the central point since it is obviously a center of symmetry.
Even with that in mind, I will not bother redesigning the code below because once again hey, it works^{tm}.
If you don't understand how this code works, don't worry, neither do I.
#+begin_src python :noweb-ref "Textual quarter methods"
def raw(self, appearance=None):
    # Length of the sides.
    length = pow(2, self.degree) + 1

    # Special case without points.
    if appearance is None:
        tb_common = Quarter.HORIZONTAL * (length - 2)\
            + Quarter.CORNER
        top = Quarter.CORNER + tb_common
        bottom = Quarter.NORTH_POLE + tb_common
        emptyline = Quarter.VERTICAL + Quarter.EMPTY * (length - 2)\
            + Quarter.VERTICAL
        return [top] + [emptyline] * (length - 2) + [bottom]

    # Special case with corner points.
    if appearance == 0:
        if self.quarter == 0:
            topright = self.display_points[appearance] # Technically south pole
            bottomleft = Quarter.NORTH_POLE_POINT
        else:
            bottomleft = Quarter.NORTH_POLE
            if self.display_redundant:
                topright = self.redundant
            else:
                topright = Quarter.CORNER
        top = Quarter.CORNER + Quarter.HORIZONTAL * (length - 2) + topright
        bottom = bottomleft\
            + Quarter.HORIZONTAL * (length - 2) + self.display_points[appearance]
        emptyline = Quarter.VERTICAL + Quarter.EMPTY * (length - 2)\
            + Quarter.VERTICAL
        return [top] + [emptyline] * (length - 2) + [bottom]

    # Number of points in odd and even lines.
    npoints_even = pow(2, appearance - 1)
    npoints_odd = pow(2, appearance) - 1

    # Number of spaces separating points in the middle
    # for odd and even lines.
    nspaces_odd = pow(2, self.degree - appearance) - 1
    nspaces_even = 2 * nspaces_odd + 1

    # Number of even lines.
    nlines_even = pow(2, appearance - 1) - 1

    # Construct composite strings.
    small_horizontal = Quarter.HORIZONTAL * nspaces_odd
    big_horizontal = Quarter.HORIZONTAL * nspaces_even
    small_empty = Quarter.EMPTY * nspaces_odd
    big_empty = Quarter.EMPTY * nspaces_even

    # Build lines.
    right_vertical = self.redundant if self.display_redundant else Quarter.VERTICAL
    tb_common = small_horizontal\
        + big_horizontal.join([self.display_points[appearance]] * npoints_even)\
        + small_horizontal + Quarter.CORNER
    top = Quarter.CORNER + tb_common
    bottom = Quarter.NORTH_POLE + tb_common
    emptylines = [
        Quarter.VERTICAL + Quarter.EMPTY * (length - 2) + Quarter.VERTICAL
    ] * nspaces_odd
    oddline = Quarter.VERTICAL + small_empty\
        + small_empty.join([self.display_points[appearance]] * npoints_odd)\
        + small_empty + right_vertical
    evenline = Quarter.VERTICAL + small_empty\
        + big_empty.join([self.display_points[appearance]] * npoints_even)\
        + small_empty + Quarter.VERTICAL

    # Assemble the quarter this is like str.join but with list
    fulllines = [top] + ([oddline, evenline]) * nlines_even\
        + [oddline, bottom]
    def joinlines():
        it = iter(fulllines)
        yield next(it)
        for el in it:
            for empty in emptylines:
                yield empty
            yield el

    return list(joinlines())
#+end_src


** Generate the final representation

Here are handled the forementioned assembly steps, in the following method:
#+begin_src python :noweb no-export :noweb-ref "Textual quarter methods"
def repr(self):
    <<Assemble the degrees of appearance>>
    <<Rotate the quarter>>
    <<Apply horizontal compensation>>
#+end_src

The =Quarter= class is represented as a list of lines.
To put icing on the cake, we also handle a string version of the representation:
#+begin_src python :noweb-ref "Textual quarter methods"
def __str__(self):
    return '\n'.join(self.repr())
#+end_src

=__str__= is a magic method that is called when a =str= conversion is applied by Python.
Since a =str= conversion is automatically applied in code when =print= is called, code like src_python[:exports code]{print(quarter0)} will be enough to print the representation, which is great syntactic sugar in my opinion.

*** Assemble the degrees of appearance

When dealing with a list of degrees of appearance, they are merged together.
#+name: Assemble the degrees of appearance
#+begin_src python
if type(self.appearance) is list:
    assert len(self.appearance) > 0
    assembly = self.raw(self.appearance[0])
    for appearance in self.appearance[1:]:
        assembly = self.merge_raw_quarters(
            assembly,
            self.raw(appearance),
            self.valid_points
        )
else:
    assembly = self.raw(self.appearance)
#+end_src

To implement =merge_raw_quarters=, we first need to be able to merge two lines together.
With this textual representation, we just have to iterate through the two lines simultaneously and prioritise the point character above every other.
I also output a collision character when two points collide, because that would mean either a repetition in =appearance= or a mistake in =merge_quarter_lines= and I want both failures to be obvious.

#+begin_src python :noweb-ref "Textual quarter utils"
def merge_quarter_lines(left, right, valid_points):
    buffer = []
    for cleft, cright in zip(left, right):
        if cright in valid_points:
            if cleft in Quarter.CAN_COLLIDE:
                buffer += cright
            else:
                buffer += Quarter.COLLISION
        else:
            buffer += cleft
    return ''.join(buffer)
#+end_src

The actual merging method simply uses =merge_quarter_lines= to merge every line into a new list:
#+begin_src python :noweb-ref "Textual quarter methods"
def merge_raw_quarters(self, left, right, valid_points):
    return list(merge_quarter_lines(l, r, valid_points) for l, r in zip(left, right))
#+end_src

Because =reduce= is no longer a primitive in Python3, it must be imported:
#+begin_src python :noweb-ref "Textual quarter dependencies"
from functools import reduce
#+end_src

*** Rotate the quarter

To put the quarter into the right orientation, we do =quarter= left rotations.
It would be faster, for example, to do one right rotation when =quarter == 3= but there is no need for optimisation right now.
#+name: Rotate the quarter
#+begin_src python
for _ in range(self.quarter):
    assembly = rotate_quarter_representation_left(assembly)
#+end_src

Rotating the representation left is a succession of two tricks:
 1. Replacing vertical characters with horizontal ones and vice versa.
 2. Replacing lines with columns, in inverse order (that's what =reversed(list(zip(*lines)))= does).
#+begin_src python :noweb-ref "Textual quarter utils"
def rotate_quarter_representation_left(lines):
    replacement = {Quarter.HORIZONTAL: Quarter.VERTICAL,
                   Quarter.VERTICAL: Quarter.HORIZONTAL}
    def replace(sequence):
        return ''.join(
            replacement[char] if char in replacement
            else char
            for char in sequence
        )
    return [newline for newline in map(replace, reversed(list(zip(*lines))))]
#+end_src

*** Apply horizontal compensation

Applying horizontal compensation is a must because vertical text space is roughly twice as big as horizontal text space, so the representation is excessively vertical:
#+begin_src python :eval no-export :exports both
<<Textual quarter>>
print('\n'.join(Quarter(2).raw(2)))
#+end_src

#+RESULTS:
#+begin_src text :minipage
+x-x+
|xxx|
|x x|
|xxx|
ox-x+
#+end_src

Horizontal compensation is the last step to produce the final representation so we are ready to return:
#+name: Apply horizontal compensation
#+begin_src python
return horizontal_compensation(assembly)
#+end_src


The horizontal compensation function simply pads the top and bottom lines with horizontal characters and the other lines with empty characters.
#+begin_src python :noweb-ref "Textual quarter utils"
def horizontal_compensation(lines):
    buffer = [Quarter.HORIZONTAL.join(lines[0])]       # Top.
    for line in lines[1:-1]:
        buffer.append(Quarter.EMPTY.join(line))        # Others.
    buffer.append(Quarter.HORIZONTAL.join(lines[-1]))  # Bottom.
    return buffer
#+end_src

Now the text representation looks much better:
#+begin_src python :eval no-export :exports both
<<Textual quarter>>
print('\n'.join(horizontal_compensation(Quarter(2).raw(2))))
#+end_src

#+RESULTS:
#+begin_src text :minipage
+-x---x-+
| x x x |
| x   x |
| x x x |
o-x---x-+
#+end_src


** Demonstration
:PROPERTIES:
:header-args:python+: :exports both :eval no-export
:END:

#+begin_src python :exports both
<<Textual quarter>>
for degree in range(2, 5):
    print(Quarter(degree=degree, appearance=2, quarter=0))
#+end_src

#+RESULTS:
#+begin_src text :minipage
+-x---x-+
| x x x |
| x   x |
| x x x |
o-x---x-+
+---x-------x---+
|               |
|   x   x   x   |
|               |
|   x       x   |
|               |
|   x   x   x   |
|               |
o---x-------x---+
+-------x---------------x-------+
|                               |
|                               |
|                               |
|       x       x       x       |
|                               |
|                               |
|                               |
|       x               x       |
|                               |
|                               |
|                               |
|       x       x       x       |
|                               |
|                               |
|                               |
o-------x---------------x-------+
#+end_src


** Textual squarified net representation

Textual representation of a squarified octasierp net is generated with the  =SquareNet= class.
Most of the work has already been done in =Quarter= so the arguments are the same, except for:
 - =quarter= which becomes =quarters=, illustrating that what's left to be done is to assemble the four quarters together.
 - =show_axis= is a specific argument to include the axis and their gradation in the final representation.
 - =point_rep= associates a quarter to a point representation.

The caller can choose to represent only a subset of the quarter by specifying for example src_python[:exports code]{SquareNet(degree, appearance, quarters={0,1})} to include only quarters 0 and 1.
The excluded quarters will be represented devoid of points.

#+name: Textual squarified net
#+begin_src python
<<Textual quarter>>
<<SquareNet utils>>
class SquareNet:
    def __init__(
            self, degree, appearance=None, quarters={0, 1, 2, 3},
            display_redundant=False, show_axis=False, point_rep=lambda quarter: ['x']
    ):
        self.degree = degree
        self.appearance = appearance
        self.quarters = [Quarter(
            degree=degree,
            appearance=appearance if n in quarters else None,
            quarter=n,
            display_redundant=display_redundant,
            display_points=point_rep(n)
        ) for n in range(4)]
        self.show_axis = show_axis

    <<Final squarified net representation>>
#+end_src

*** Vertical and horizontal contatenation

To generate the final representation, we have to first concatenate horizontally quarter 0 with quarter 1 and quarter 2 with quarter 3.
Then only one vertical concatenation on the results of those two previous concatenations remain to be done.
Like with =Quarter=, =repr= returns a list of lines:
#+begin_src python :noweb-ref "Final squarified net representation"
def repr(self):
    valid_points_top = self.quarters[1].valid_points | self.quarters[0].valid_points
    top = cat_quarter_horizontally(
        self.quarters[1].repr(),
        self.quarters[0].repr(),
        valid_points_top
    )

    valid_points_bottom = self.quarters[2].valid_points | self.quarters[3].valid_points
    bottom = cat_quarter_horizontally(
        self.quarters[2].repr(),
        self.quarters[3].repr(),
        valid_points_bottom
    )

    result = cat_quarter_vertically(top, bottom, valid_points_top | valid_points_bottom)
    if self.show_axis:
        <<Add axis to SquareNet representation>>
    return result
#+end_src

And =__str__=, the string equivalent:
#+begin_src python :noweb-ref "Final squarified net representation"
def __str__(self):
    return '\n'.join(self.repr())
#+end_src

The vertical concatenation is the easiest ; since the representation is a list of lines, all lines are concatenated, except the central one (the one in common between the two quarters), which is merged:
#+begin_src python :noweb-ref "SquareNet utils"
def cat_quarter_vertically(top, bottom, valid_points):
    return top[:-1] + [merge_quarter_lines(top[-1], bottom[0], valid_points)] + bottom[1:]
#+end_src

The horizontal concatenation is a little bit longer because it goes against our vertically-oriented representation.
It's not that complicated because =merge_quarter_lines= can merge columns as well as lines:
#+begin_src python :noweb-ref "SquareNet utils"
def cat_quarter_horizontally(left, right, valid_points):
    right_of_left = [line[-1] for line in left]
    left_of_right = [line[0] for line in right]
    merged_column = merge_quarter_lines(right_of_left, left_of_right, valid_points)
    return [
        l[:-1] + merged_column[i] + r[1:]
        for i, (l, r) in enumerate(zip(left, right))
    ]
#+end_src

We can now represent for example the last points of all quarters of a squarified net of degree 2, with the redundant points:
#+begin_src python :eval no-export :exports both
<<Textual squarified net>>
print(SquareNet(2, 2, quarters={0, 1, 2, 3}, display_redundant=True))
#+end_src

#+RESULTS:
#+begin_src text :minipage
+-v---v-+-x---x-+
x x x x x x x x v
| x   x | x   x |
x x x x x x x x v
+-x---x-o-x---x-+
v x x x x x x x x
| x   x | x   x |
v x x x x x x x x
+-x---x-+-v---v-+
#+end_src

*** Add axis to representation
:PROPERTIES:
:header-args:python+: :noweb-ref "Add axis to SquareNet representation"
:END:

First of all we create the gradations with the help of =lenhalf=, the length of strictly positive (and strictly negative) values on the gradations.
For example the =gradations= of a squarified net of degree 2 will be =[-4, -3, -2, -1, 0, 1, 2, 3, 4]= and =lenhalf= will be =4=.
#+begin_src python
lenhalf = len(top) - 1
gradations = list(range(lenhalf, 0, -1))
gradations = list(map(str, gradations + [0] + list(reversed(gradations))))
#+end_src

The left axis is split into three part:
 1. The axis proper.
 2. The gradation.
 3. The legend (plus and minus signs).
#+begin_src python
leftax = '^|' + '|' * len(result)
leftgrad = ' ' + ''.join(reversed(gradations))
leftleg = ' ' + '+' * lenhalf + ' ' + '-' * lenhalf
#+end_src

Same thing for the bottom ax:
#+begin_src python
bottomax = '   +' + '--' * len(result) + '-->'
bottomgrad = '      ' + ' '.join(gradations)
bottomleg = '      ' + '- ' * lenhalf + ' ' + ' +' * lenhalf
#+end_src

Finally we modify the =result= by first inserting the left axis into each line and then appending the bottom axis to it.
#+begin_src python
result = [
    leg + grad + ' ' + ax + '  ' + line
    for leg, grad, ax, line in zip(
            leftleg, leftgrad, leftax, [''] + result
    )
] + [bottomax, bottomgrad, bottomleg]
# Remove extraneous space, I can't bear the thought.
result[0] = result[0].rstrip(' ')
#+end_src


Demonstration time:
#+begin_src python :eval no-export :exports both :noweb-ref no
<<Textual squarified net>>
print(SquareNet(2, [0, 2], show_axis=True))
#+end_src

#+RESULTS:
#+begin_src text :minipage
   ^
+4 |  +-------x-x---x-x
+3 |  x x x x x x x x |
+2 |  | x   x | x   x |
+1 |  x x x x x x x x |
 0 |  x-x---x-X-x---x-x
-1 |  | x x x x x x x x
-2 |  | x   x | x   x |
-3 |  | x x x x x x x x
-4 |  +-x---x-x-------+
   +-------------------->
      4 3 2 1 0 1 2 3 4
      - - - -   + + + +
#+end_src

Note that this representation will break if we ever try to include gradations greater than 9, because it assumes that gradations are single-digit numbers.
The last degree for which a correct axis can be made is therefore degree 3 with its gradations going from -8 to 8.
It would be possible to make it work with higher degrees but degree 3 covers my needs regarding this feature.


** Utils

Utilities dedicated to help with the manipulation of the textual representation.

*** Edition of a list of strings (listr)

Because strings are immutable, editing a list of strings in place is a pain.
The following takes a list of strings applies a list of replacement (a 3-uple composed of the line number, the row number and the replacement string) to it.

#+name: listr_replace
#+begin_src python
def listr_replace(listr, replacements):
    for row, col, content in replacements:
        listr[row] = listr[row][:col] + content + listr[row][col+1:]
#+end_src


* References
 - https://en.wikipedia.org/wiki/Find_first_set#CTZ

 - http://old.cescg.org/CESCG97/marak/index.html (erosion, move)

 - https://news.ycombinator.com/item?id=8681899, http://experilous.com/1/blog/post/procedural-planet-generation (planet generation, move)

 - http://jsfiddle.net/rL0qmee9/ (procedural generation bookmarks, move)

 - https://www.w3schools.com/colors/colors_picker.asp (color palettes)
