#+title: C++ OpenGL window
#+author: mooss

#+property: header-args:cpp :eval never :noweb no-export :main no :flags -I include -ldl -lGL -lglfw src/glad.c -std=c++20 -Wall -Werror

* Prelude :noexport:

#+name: include
#+begin_src sh :var args="" :results output :wrap "src cpp" :eval no-export :minipage
./litlib/include.pl "window.org litlib/cpp.org" "$args"
#+end_src


* Window

GLFW (https://www.glfw.org) is used to create a window, so we need to store a handle to the window and monitor used.

Below is the main structure of this class, the rest will be defined as the =window/public= code block.

#+name: window
#+begin_src cpp :minipage
class window
{
  public:
    GLFWwindow* window_handle;
    GLFWmonitor* monitor_handle;
    struct size {
        int width, height;
        float aspect() const {return (float) width / (float) height;}
    };

    const std::string& title() const {return title_;}
    int width() const {return size_->width;}
    int height() const {return size_->height;}
    bool should_close() const {return glfwWindowShouldClose(window_handle);}
    float aspect() const {return size_->aspect();}

    <<window/public>>

  private:
    const std::string title_;
    observable<size> size_;
};
#+end_src
#+depends:window :noweb observable :cpp glad/glad.h GLFW/glfw3.h stdexcept

** Titled constructor

#+begin_src cpp :noweb-ref window/public :minipage
window(const std::string& title, int w, int h):
    window_handle(nullptr), monitor_handle(nullptr), title_(title), size_({.width=w, .height=h})
{
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    <<window/Titled constructor>>
}
#+end_src

*** Create window

If =monitor_handle='s value is =nullptr=, this is not a problem because when =glfwCreateWindow= is called this way, it simply creates a window in windowed mode.

The last parameter of =glfwCreateWindow= is for context sharing, which we will not use.
 
#+begin_src cpp :noweb-ref "window/Titled constructor" :minipage
window_handle = glfwCreateWindow(
    size_->width, size_->height, title.c_str(), monitor_handle, nullptr
);
if(window_handle == nullptr){
    glfwTerminate();
    throw std::runtime_error("Failed to create glfw window");
}
#+end_src

*** OpenGL setup

The OpenGL context holds the state of the current OpenGL instance.
A process can make several OpenGL contexts.
The call to =glfwCreateWindow= in the section above spawned an OpenGL context[fn:: See https://www.glfw.org/docs/latest/context_guide.html].
Before doing any OpenGL work, the context associated to the =window_handle= is made current via =glfwMakeContextCurrent=.

#+begin_src cpp :noweb-ref "window/Titled constructor" :minipage
glfwMakeContextCurrent(window_handle);
if(!gladLoadGLLoader((GLADloadproc) glfwGetProcAddress)){
    glfwDestroyWindow(window_handle);
    glfwTerminate();
    throw std::runtime_error("Failed to create OpenGL context with glad");
}

int fb_width, fb_height;
glfwGetFramebufferSize(window_handle, &fb_width, &fb_height);
glViewport(0, 0, fb_width, fb_height);
#+end_src

*** Automatic resizing

The OpenGL viewport must be adjusted to fit the window when the user resizes the window.
This requires to register a callback, and below is the method that will technically handle this callback:

#+begin_src cpp :noweb-ref window/public :minipage
void resize_viewport(GLFWwindow* ignore, int width, int height) {
    size_ = size({.width=width, .height=height});
    glViewport(0, 0, size_->width, size_->height);
}
#+end_src

Note that this method triggers a modification of the =window='s size, hence why it is a method and not a free function.
Sadly, a method pointer cannot be trivially transformed into a function pointer, which is why =glfwSetWindowUserPointer= and =glfwGetWindowUserPointer= must be used to transmit the =this= pointer to a captureless lambda delegating the work to =resize_viewport=.

This technique was explained here: https://stackoverflow.com/a/28660673.

#+begin_src cpp :noweb-ref "window/Titled constructor" :minipage
glfwSetWindowUserPointer(window_handle, this);
auto callback = [](GLFWwindow* handle, int width, int height) {
    static_cast<window*>(glfwGetWindowUserPointer(handle))->resize_viewport(handle, width, height);
};
glfwSetFramebufferSizeCallback(window_handle, callback);
#+end_src

The following can be used from the outside to be notified of changes in window sizes:
#+begin_src cpp :noweb-ref window/public :minipage
template<typename Observer>
auto observe_size(Observer&& observer) {
    return size_.observe(observer);
}
#+end_src


** Destructor

We only have to tell GLFW to liberate the resources it has allocated.
#+begin_src cpp :noweb-ref "window/public" :minipage
~window()
{
    glfwDestroyWindow(window_handle);
    glfwTerminate();
}
#+end_src


** Empty window test

#+begin_src cpp :eval no-export :results silent :minipage
<<include(":noweb window")>>

void key_callback(GLFWwindow* window, int key, int scancode, int action, int mods){
    if(key == GLFW_KEY_ESCAPE && action == GLFW_PRESS)
        glfwSetWindowShouldClose(window, GLFW_TRUE);
}

int main(){
    window empty_window("Empty window", 640u, 480u);
    glfwSetKeyCallback(empty_window.window_handle, key_callback);
    glClearColor(0.4, 0.007843137, 0.235294118, 0); // Tyrian purple.
    while(!glfwWindowShouldClose(empty_window.window_handle)){
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
        glfwPollEvents();
        glfwSwapBuffers(empty_window.window_handle);
    }
    return 0;
}
#+end_src


* Lazy window

The goal of this section is to provide some boilerplate that can help with experimentation but does not necessarily have its place inside a proper window class.

** Basic structure

At its core, =lazy_window= is a window with a default grey background that simply closes when pressing escape.

#+name: lazy_window
#+begin_src cpp :minipage
void escape_close(GLFWwindow* window, int key, int scancode, int action, int mods){
    if(key == GLFW_KEY_ESCAPE && action == GLFW_PRESS)
        glfwSetWindowShouldClose(window, GLFW_TRUE);
}

struct lazy_window: public window {
    lazy_window(const std::string& title, unsigned int width, unsigned int height):
        window(title, width, height)
    {
        glEnable(GL_DEPTH_TEST); // TODO: eventually move this kind of OpenGL settings
                                 // enabling/disabling into its own class.
        glfwSetKeyCallback(this->window_handle, escape_close);
        glClearColor(.5f, .5f, .5f, 0.0f);
    }

    lazy_window(const std::string& title): lazy_window(title, 640, 480) {}

    <<lazy_window/public>>;
};
#+end_src
#+depends:lazy_window :noweb window


** Rendering methods

Packaged within =lazy_window= are the following rendering methods:
#+begin_src cpp :noweb-ref lazy_window/public :minipage
template<typename F> // Great for OpenGL calls debugging via LOG_AND_CALL.
void render_one(F rendering) const {
    glfwPollEvents();
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    rendering();
    glfwSwapBuffers(this->window_handle);
}

template<typename F> // Useful to observe quickly the result of some adjustment.
void render_n(std::size_t n, F rendering) const {
    for(std::size_t i = 0; i < n && !should_close(); ++i) {
        render_one(rendering);
    }
}

template<typename F> // Renders frames until escape is pressed.
void game_loop(F rendering) const {
    while(!should_close()){
        render_one(rendering);
    }
}
#+end_src

The first thing done when rendering a frame is event polling.
That is because the window can be immediately resized when starting.
Therefore if event polling is done at the end, the first frame will be rendered in a window having the new size but the other components of the system will not be aware of this new size until the next frame.
This can result in graphical issues like a stretching of the first frame.
This is very relevant for this project because the first frame is often screened and saved for illustration purposes.


** Usage

The following draws absolutely nothing, but it does it handily:
#+begin_src cpp :eval no-export :results silent :minipage
<<include(":noweb lazy_window")>>

int main(){
    lazy_window lazy("Sloth", 640u, 480u);
    lazy.game_loop([]{});
    return 0;
}
#+end_src


* Screenshots

I thought that being able to take screenshots of the OpenGL scene being rendered would be very difficult while keeping external dependencies small, but thankfully stb (https://github.com/nothings/stb) has a header ready for this.
I'm amazed by this thing.

** Render buffer

Some preprocessing is needed to first extract the pixels into a buffer but my work was cut out for me thanks to this post on the subject: https://lencerf.github.io/post/2019-09-21-save-the-opengl-rendering-to-image-file/.
I adapted it to the =window= class and organized it around the struct =render_buffer=.

It's a struct because I needed to pass around not only the buffer but also some metadata.
The more advanced features such as saving to a file are free functions and not member functions because those features imply additional dependencies and I prefer to only pay for what I use.
I cannot yet "inject" noweb blocks into other blocks and therefore any additional member function has to be hardcoded into the class along with its dependencies.

#+name: render_buffer
#+begin_src cpp :minipage
struct render_buffer {
    GLsizei channels = 3, stride = 0, width = 0, height = 0;
    std::vector<unsigned char> storage = std::vector<unsigned char>(0);

    render_buffer(const window& source) {grab(source);}
    render_buffer(GLsizei w, GLsizei h, GLsizei c):
        channels(c) {resize(w, h);}

    void resize(GLsizei w, GLsizei h) {
        width=w; height=h; stride = channels * width;
        // Make stride a multiple of 4, for alignment purposes.
        stride += (stride % 4) ? (4 - stride % 4): 0;
        storage.resize(stride * height);
    }

    unsigned char* data() {return storage.data();}
    const unsigned char* data() const {return storage.data();}

    void grab(const window& source) {
        resize(source.width(), source.height());
        glPixelStorei(GL_PACK_ALIGNMENT, 4);
        glReadBuffer(GL_FRONT);
        glReadPixels(0, 0, width, height, GL_RGB, GL_UNSIGNED_BYTE, data());
    }
};
#+end_src
#+depends:render_buffer :noweb window :cpp vector

I'm using =unsigned char= as the type underlying the buffer because that is what stb uses.

Write a =render_buffer= to a file with stb:
#+name: write_render_buffer
#+begin_src cpp :minipage
void write_render_buffer(const render_buffer& buffer, const std::string& destination) {
    stbi_flip_vertically_on_write(true);
    stbi_write_png(
        destination.c_str(), buffer.width, buffer.height,
        buffer.channels, buffer.data(), buffer.stride
    );
}
#+end_src
#+depends:write_render_buffer :noweb render_buffer stb_image_write<compressed> :cpp string

Shortcut to directly write a screenshot from a =window=:
#+name: save_screenshot
#+begin_src cpp :minipage
void save_screenshot(const window& source, const std::string& destination) {
    render_buffer buffer(source);
    write_render_buffer(buffer, destination);
}
#+end_src
#+depends:save_screenshot :noweb window render_buffer write_render_buffer :cpp string

Concerning the =stb_image_write= dependency, I had to make it a noweb dependency rather than a C++ dependency because this was the only way to =#define= the mandatory =STB_IMAGE_WRITE_IMPLEMENTATION= before the inclusion.
#+name: stb_image_write
#+begin_src cpp :minipage
#define STB_IMAGE_WRITE_IMPLEMENTATION
#include <stb/stb_image_write.h>
#+end_src

** Cropping

Cropping a =render_buffer= is done by wildly copying the cropped lines into another buffer of reduced dimensions.
It is a very naïve implementation, in particular because I'm not sure how I am supposed to handle the strides.
Anyway, it seems to be working.

#+name: crop_render_buffer
#+begin_src cpp
auto crop_render_buffer(
    const render_buffer& buffer,
    const GLsizei left, const GLsizei right,
    const GLsizei top, const GLsizei bottom
) {
    GLsizei cropped_w = buffer.width - right - left;
    GLsizei cropped_h = buffer.height - top - bottom;
    render_buffer cropped_buffer(cropped_w, cropped_h, buffer.channels);

    for(GLsizei x = 0; x < cropped_h; ++x) {
        auto start_line = buffer.storage.begin() + buffer.stride * (x + bottom) + left * buffer.channels;
        auto end_line = start_line + cropped_buffer.stride;
        auto dest = cropped_buffer.storage.begin() + cropped_buffer.stride * x;
        std::copy(start_line, end_line, dest);
    }

    return cropped_buffer;
}
#+end_src
#+depends:crop_render_buffer :noweb render_buffer :cpp algorithm utility

This is a shortcut to transform the given buffer into the biggest square buffer possible:
#+name: square_crop_render_buffer
#+begin_src cpp
auto square_crop_render_buffer(const render_buffer& buffer) {
    GLsizei left=0, right=0, top=0, bottom=0;
    if(buffer.width > buffer.height) { // Remove from left and right.
        GLsizei diff = buffer.width - buffer.height;
        left = diff / 2; right = diff - left;
    } else if(buffer.height > buffer.width) { // Remove from top and bottom.
        GLsizei diff = buffer.height - buffer.width;
        top = diff / 2; bottom = diff - top;
    }
    return crop_render_buffer(buffer, left, right, top, bottom);
}
#+end_src
#+depends:square_crop_render_buffer :noweb crop_render_buffer

** Compression

Images can be compressed further by using an external compressing function via =STBIW_ZLIB_COMPRESS=.

I've taken code from https://blog.gibson.sh/2015/07/18/comparing-png-compression-ratios-of-stb_image_write-lodepng-miniz-and-libpng to use the miniz compression library.
I just had to add a =static_cast= around =malloc= because C++ was having none of it.

#+name: stb_image_write<compressed>
#+begin_src cpp :minipage
static unsigned char* gibson_stbi_zlib_compress(
    unsigned char *data, int data_len,
    int *out_len, int quality
) {
    mz_ulong buflen = mz_compressBound(data_len);
    unsigned char* buf = static_cast<unsigned char*>(malloc(buflen));
    if(buf == nullptr || mz_compress2(buf, &buflen, data, data_len, quality) != 0) {
        free(buf);
        return nullptr;
    }
    *out_len = buflen;
    return buf;
}
#define STBIW_ZLIB_COMPRESS gibson_stbi_zlib_compress
#define STB_IMAGE_WRITE_IMPLEMENTATION
#include <stb/stb_image_write.h>
#+end_src
#+depends:stb_image_write<compressed> :cpp miniz.c

To switch between the miniz and the pure stb version, edit the =#+depends:write_render_buffer= dependency declaration line above to use respectively =stb_image_write<compressed>= or =stb_image_write=.
This means that the additional compression or lack thereof is hardcoded in this file.
I need to start thinking about a mechanism to pick alternative implementations.
I think this angled braces syntax is a good starting point, meaning that =stb_image_write<compressed>= is declared as being an alternative implementation of the reference =stb_image_write=.


** Resizing

My main use case for screen captures is to include them in compiled HTML or PDF documents, so I don't need and don't want to keep them at full resolution.
Once again stb has me covered with the header =stb_image_resize.h=.

#+name: resize_render_buffer
#+begin_src cpp :minipage
render_buffer resize_render_buffer(const render_buffer& buffer, GLsizei w, GLsizei h) {
    render_buffer resized(w, h, buffer.channels);
    stbir_resize_uint8(
        buffer.data(), buffer.width, buffer.height, buffer.stride,
        resized.data(), resized.width, resized.height, resized.stride,
        buffer.channels
    );
    return resized;
}
#+end_src
#+depends:resize_render_buffer :noweb render_buffer stb_image_resize

The handling of the =stb_image_resize= dependency is the same as with =stb_image_write=:
#+name: stb_image_resize
#+begin_src cpp :minipage
#define STB_IMAGE_RESIZE_IMPLEMENTATION
#include <stb/stb_image_resize.h>
#+end_src

Finally, below is a specialised implementation of =save_screenshot= to always save images scaled to 720p.
#+name: save_screenshot<720p>
#+begin_src cpp :minipage
void save_screenshot(const window& source, const std::string& destination) {
    write_render_buffer(
        resize_render_buffer(render_buffer(source), 1280, 720),
        destination
    );
}
#+end_src
#+depends:save_screenshot<720p> :noweb window render_buffer write_render_buffer resize_render_buffer :cpp string


** Lazy functions

The helpers in this section make it a little less cumbersome to capture and save the desired frame.
The =gl_= prefix here stands for game loop.

#+name: gl_screen_nth
#+begin_src cpp :minipage
template<typename Callable>
void gl_screen_nth(
    const lazy_window& source, const std::string& destination,
    Callable render, std::size_t n
) {
    source.render_n(n, render);
    save_screenshot(source, destination);
    std::cout << "[[file:" << destination << "]]\n";
    source.game_loop(render);
}
#+end_src
#+depends:gl_screen_nth :noweb save_screenshot<720p> lazy_window :cpp iostream

#+name: gl_screen_first
#+begin_src cpp :minipage
template<typename Callable>
void gl_screen_first(
    const lazy_window& source, const std::string& destination, Callable render
) {
    gl_screen_nth(source, destination, render, 1);
}
#+end_src
#+depends:gl_screen_first :noweb gl_screen_nth lazy_window
