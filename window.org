#+title: C++ OpenGL window
#+author: mooss

#+property: header-args:cpp :eval never :noweb no-export :main no :flags -I include -ldl -lGL -lglfw src/glad.c -std=c++20 -Wall -Werror

* Prelude :noexport:

#+name: include
#+begin_src sh :var args="" :results output :wrap "src cpp" :eval no-export :minipage
./litlib/include.pl "window.org litlib/cpp.org" "$args"
#+end_src


* Window

GLFW (https://www.glfw.org) is used to create a window, so we need to store a handle to the window and monitor used.

Below is the main structure of this class, the rest will be defined as the =window/public= code block.

#+name: window
#+begin_src cpp :minipage
class window
{
  public:
    GLFWwindow* window_handle;
    GLFWmonitor* monitor_handle;
    struct size {
        int width, height;
        float aspect() const {return (float) width / (float) height;}
    };

    const std::string& title() const {return title_;}
    int width() const {return size_->width;}
    int height() const {return size_->height;}
    bool should_close() const {return glfwWindowShouldClose(window_handle);}
    float aspect() const {return size_->aspect();}

    <<window/public>>

  private:
    const std::string title_;
    observable<size> size_;
};
#+end_src
#+depends:window :noweb observable :cpp glad/glad.h GLFW/glfw3.h stdexcept

** Titled constructor

#+begin_src cpp :noweb-ref window/public :minipage
window(const std::string& title, int w, int h):
    window_handle(nullptr), monitor_handle(nullptr), title_(title), size_({.width=w, .height=h})
{
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    <<window/Titled constructor>>
}
#+end_src

*** Create window

If =monitor_handle='s value is =nullptr=, this is not a problem because when =glfwCreateWindow= is called this way, it simply creates a window in windowed mode.

The last parameter of =glfwCreateWindow= is for context sharing, which we will not use.
 
#+begin_src cpp :noweb-ref "window/Titled constructor" :minipage
window_handle = glfwCreateWindow(
    size_->width, size_->height, title.c_str(), monitor_handle, nullptr
);
if(window_handle == nullptr){
    glfwTerminate();
    throw std::runtime_error("Failed to create glfw window.");
}
#+end_src

*** OpenGL setup

The OpenGL context holds the state of the current OpenGL instance.
A process can make several OpenGL contexts.
The call to =glfwCreateWindow= in the section above spawned an OpenGL context[fn:: See https://www.glfw.org/docs/latest/context_guide.html].
Before doing any OpenGL work, the context associated to the =window_handle= is made current via =glfwMakeContextCurrent=.

#+begin_src cpp :noweb-ref "window/Titled constructor" :minipage
glfwMakeContextCurrent(window_handle);
if(!gladLoadGLLoader((GLADloadproc) glfwGetProcAddress)){
    glfwDestroyWindow(window_handle);
    glfwTerminate();
    throw std::runtime_error("Failed to create OpenGL context with glad.");
}

int fb_width, fb_height;
glfwGetFramebufferSize(window_handle, &fb_width, &fb_height);
glViewport(0, 0, fb_width, fb_height);
#+end_src

*** Automatic resizing

The OpenGL viewport must be adjusted to fit the window when the user resizes the window.
This requires to register a callback, and below is the method that will technically handle this callback:

#+begin_src cpp :noweb-ref window/public :minipage
void resize_viewport(GLFWwindow* ignore, int width, int height) {
    size_ = size({.width=width, .height=height});
    glViewport(0, 0, size_->width, size_->height);
}
#+end_src

Note that this method triggers a modification of the =window='s size, hence why it is a method and not a free function.
Sadly, a method pointer cannot be trivially transformed into a function pointer, which is why =glfwSetWindowUserPointer= and =glfwGetWindowUserPointer= must be used to transmit the =this= pointer to a captureless lambda delegating the work to =resize_viewport=.

This technique was explained here: https://stackoverflow.com/a/28660673.

#+begin_src cpp :noweb-ref "window/Titled constructor" :minipage
glfwSetWindowUserPointer(window_handle, this);
auto callback = [](GLFWwindow* handle, int width, int height) {
    static_cast<window*>(glfwGetWindowUserPointer(handle))->resize_viewport(handle, width, height);
};
glfwSetFramebufferSizeCallback(window_handle, callback);
#+end_src

The following can be used from the outside to be notified of changes in window sizes:
#+begin_src cpp :noweb-ref window/public :minipage
template<typename Observer>
auto observe_size(Observer&& observer) {
    return size_.observe(observer);
}
#+end_src


** Destructor

We only have to tell GLFW to liberate the resources it has allocated.
#+begin_src cpp :noweb-ref "window/public" :minipage
~window()
{
    glfwDestroyWindow(window_handle);
    glfwTerminate();
}
#+end_src


** Empty window test

#+begin_src cpp :eval no-export :results silent :minipage
<<include(":noweb window")>>

void key_callback(GLFWwindow* window, int key, int scancode, int action, int mods){
    if(key == GLFW_KEY_ESCAPE && action == GLFW_PRESS)
        glfwSetWindowShouldClose(window, GLFW_TRUE);
}

int main(){
    window empty_window("Empty window", 640u, 480u);
    glfwSetKeyCallback(empty_window.window_handle, key_callback);
    glClearColor(0.4, 0.007843137, 0.235294118, 0); // Tyrian purple.
    while(!glfwWindowShouldClose(empty_window.window_handle)){
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
        glfwPollEvents();
        glfwSwapBuffers(empty_window.window_handle);
    }
    return 0;
}
#+end_src


* Lazy window

The goal of this section is to provide some boilerplate that can help with experimentation but does not necessarily have its place inside a proper window class.

** Basic structure

At its core, =lazy_window= is a window with a default grey background that simply closes when pressing escape.

#+name: lazy_window
#+begin_src cpp :minipage
void escape_close(GLFWwindow* window, int key, int scancode, int action, int mods){
    if(key == GLFW_KEY_ESCAPE && action == GLFW_PRESS)
        glfwSetWindowShouldClose(window, GLFW_TRUE);
}

struct lazy_window: public window {
    lazy_window(const std::string& title, unsigned int width, unsigned int height):
        window(title, width, height)
    {
        glEnable(GL_DEPTH_TEST); // TODO: eventually move this kind of OpenGL settings
                                 // enabling/disabling into its own class.
        glfwSetKeyCallback(this->window_handle, escape_close);
        glClearColor(.5f, .5f, .5f, 0.0f);
    }

    lazy_window(const std::string& title): lazy_window(title, 640, 480) {}

    <<lazy_window/public>>;
};
#+end_src
#+depends:lazy_window :noweb window


** Rendering methods

Packaged within =lazy_window= are the following rendering methods:
#+begin_src cpp :noweb-ref lazy_window/public :minipage
template<typename F> // Great for OpenGL calls debugging via LOG_AND_CALL.
void render_one(F rendering) const {
    glfwPollEvents();
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    rendering();
    glfwSwapBuffers(this->window_handle);
}

template<typename F> // Useful to observe quickly the result of some adjustment.
void render_n(std::size_t n, F rendering) const {
    for(std::size_t i = 0; i < n && !should_close(); ++i) {
        render_one(rendering);
    }
}

template<typename F> // Renders frames until escape is pressed.
void game_loop(F rendering) const {
    while(!should_close()){
        render_one(rendering);
    }
}
#+end_src

The first thing done when rendering a frame is event polling.
That is because the window can be immediately resized when starting.
Therefore if event polling is done at the end, the first frame will be rendered in a window having the new size but the other components of the system will not be aware of this new size until the next frame.
This can result in graphical issues like a stretching of the first frame.
This is very relevant for this project because the first frame is often screened and saved for illustration purposes.


** Usage

The following draws absolutely nothing, but it does it handily:
#+begin_src cpp :eval no-export :results silent :minipage
<<include(":noweb lazy_window")>>

int main(){
    lazy_window lazy("Sloth", 640u, 480u);
    lazy.game_loop([]{});
    return 0;
}
#+end_src

* OpenGL context

=gl_context= can create an OpenGL context without opening a window.
OSMesa is used for offscreen rendering.

#+name: gl_context
#+begin_src cpp
class gl_context {
  public:
    std::vector<GLubyte> buffer;
    gl_context(int width, int height):
        width_(width), height_(height), buffer(width * height * 4) {
        auto mesa_context = OSMesaCreateContext(OSMESA_RGBA, NULL);

        if(!mesa_context){ // TODO: panic function.
            std::cerr << "Failed to create OSMesa context.\n";
            exit(1);
        }
        if(!OSMesaMakeCurrent(mesa_context, buffer.data(), GL_UNSIGNED_BYTE, width_, height_)) {
            std::cerr << "Failed to make OSMesa context current.\n";
            exit(1);
        }
        if(!gladLoadGLLoader((GLADloadproc) OSMesaGetProcAddress)){
            std::cerr << "Failed to create OpenGL context with glad.\n";
            exit(1);
        }

        glViewport(0, 0, width_, height_);
    }

    // TODO: destructor to cleanup?

    void resize(int w, int h) {
        width_ = w; height_ = h;
        glViewport(0, 0, width_, height_);
    }

    int width() const { return width_; }
    int height() const { return height_; }

    <<gl_context/public>>

  private:
    int width_;
    int height_;
};
#+end_src
#+depends:gl_context :cpp glad/glad.h GL/osmesa.h iostream

Renders one image, with the same interface as =window=.
#+begin_src cpp :noweb-ref gl_context/public
template<typename F>
void render_one(F rendering) const {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    rendering();
}
#+end_src


* Screenshots

I thought that being able to take screenshots of the OpenGL scene being rendered would be very difficult while keeping external dependencies small, but thankfully stb (https://github.com/nothings/stb) has a header ready for this.
I'm amazed by this thing.

** Image writing

The blocks defined are both here to include =stb/stb_image_write.h=, they only differ in the way they handle png compression.

*** Native compression

I had to make the =stb_image_write= dependency a noweb dependency rather than a C++ dependency because this was the only way to =#define= the mandatory =STB_IMAGE_WRITE_IMPLEMENTATION= before the inclusion.
#+name: stb_image_write
#+begin_src cpp :minipage
#define STB_IMAGE_WRITE_IMPLEMENTATION
#include <stb/stb_image_write.h>
#+end_src

*** Miniz compression

Images can be compressed further by specifying an external compressing function via =STBIW_ZLIB_COMPRESS=.

I've taken code from https://blog.gibson.sh/2015/07/18/comparing-png-compression-ratios-of-stb_image_write-lodepng-miniz-and-libpng to use the miniz compression library.
I just had to add a =static_cast= around =malloc= because C++ was having none of it.

#+name: stb_image_write<miniz>
#+begin_src cpp :minipage
static unsigned char* gibson_stbi_zlib_compress(
    unsigned char *data, int data_len,
    int *out_len, int quality
) {
    mz_ulong buflen = mz_compressBound(data_len);
    unsigned char* buf = static_cast<unsigned char*>(malloc(buflen));
    if(buf == nullptr || mz_compress2(buf, &buflen, data, data_len, quality) != 0) {
        free(buf);
        return nullptr;
    }
    *out_len = buflen;
    return buf;
}
#define STBIW_ZLIB_COMPRESS gibson_stbi_zlib_compress
#define STB_IMAGE_WRITE_IMPLEMENTATION
#include <stb/stb_image_write.h>
#+end_src
#+depends:stb_image_write<miniz> :cpp miniz.c

To switch between the miniz and the pure stb version, edit the =#+depends:= statement of the pertinent code block to use either =stb_image_write<miniz>= or =stb_image_write=.
This means that the additional compression or lack thereof is hardcoded in the dependencies.

I need to start thinking about a mechanism to pick alternative implementations.
I think this angled braces syntax is a good starting point, meaning that =stb_image_write<miniz>= is declared as being an alternative implementation of the reference =stb_image_write=.


** Render buffer

Some preprocessing is needed to extract OpenGL pixels into a buffer but my work was cut out for me thanks to this post on the subject: https://lencerf.github.io/post/2019-09-21-save-the-opengl-rendering-to-image-file/.
I adapted it to the =window= class and organized it in the struct =render_buffer=.

Data alignment and image writing are handled by an external =Format= class, which will be defined later.

#+name: render_buffer
#+begin_src cpp
template<class Format>
struct render_buffer {
    GLsizei channels = 3, stride = 0, width = 0, height = 0;
    // Using unsigned char storage, like stb does.
    std::vector<unsigned char> storage = std::vector<unsigned char>(0);

    template<class Source>
    render_buffer(const Source& source) {grab(source);}
    render_buffer(GLsizei w, GLsizei h, GLsizei c):
        channels(c) {resize(w, h);}

    render_buffer(render_buffer&&)=default;
    render_buffer& operator=(render_buffer&&)=default;
    render_buffer(const render_buffer&)=default;
    render_buffer& operator=(const render_buffer&)=default;

    void resize(GLsizei w, GLsizei h) {
        width=w; height=h; stride = channels * width;
        // Align the stride.
        if(stride % Format::alignment)
            stride += Format::alignment - stride % Format::alignment;
        storage.resize(stride * height);
    }

    unsigned char* data() {return storage.data();}
    const unsigned char* data() const {return storage.data();}

    template<class Source>
    void grab(const Source& source) {
        resize(source.width(), source.height());
        glPixelStorei(GL_PACK_ALIGNMENT, Format::alignment);
        glReadBuffer(GL_FRONT);
        glReadPixels(0, 0, width, height, GL_RGB, GL_UNSIGNED_BYTE, data());
    }

    void write(std::string_view destination) const {
        stbi_flip_vertically_on_write(true);
        Format::write(*this, destination);
    }
};
#+end_src
#+depends:render_buffer :noweb stb_image_write<miniz> identity :cpp vector string_view


** Image transformations

Image transformations are implemented as a callable taking a source =render_buffer= and returning another, transformed, =render_buffer=.

*** Cropping

Cropping is done by wildly copying the cropped lines into another buffer of reduced dimensions.
It is a very naïve implementation, in particular because I'm not sure how I am supposed to handle the strides.
Anyway, it seems to be working.

#+name: image/crop
#+begin_src cpp :minipage
namespace image {
struct crop {
    GLsizei left, right, top, bottom;

    template<class RenderBuffer>
    auto operator()(const RenderBuffer& buffer) const {
        GLsizei cropped_w = buffer.width - right - left;
        GLsizei cropped_h = buffer.height - top - bottom;
        RenderBuffer cropped_buffer(cropped_w, cropped_h, buffer.channels);

        for(GLsizei x = 0; x < cropped_h; ++x) {
            auto source_offset = buffer.stride * (x + bottom) + left * buffer.channels;
            auto start_line = buffer.storage.begin() + source_offset;
            auto end_line = start_line + cropped_buffer.stride;
            auto dest = cropped_buffer.storage.begin() + cropped_buffer.stride * x;
            std::copy(start_line, end_line, dest);
        }
        return cropped_buffer;
    }
};
}
#+end_src
#+depends:image/crop :noweb :cpp algorithm

This is a shortcut to transform the given buffer into the biggest square buffer possible:
#+name: image/square_crop
#+begin_src cpp :minipage
namespace image {
struct square_crop {
    auto operator()(const auto& buffer) const {
        GLsizei left=0, right=0, top=0, bottom=0;
        if(buffer.width > buffer.height) { // Remove from left and right.
            GLsizei diff = buffer.width - buffer.height;
            left = diff / 2; right = diff - left;
        } else if(buffer.height > buffer.width) { // Remove from top and bottom.
            GLsizei diff = buffer.height - buffer.width;
            top = diff / 2; bottom = diff - top;
        }
        return crop{left, right, top, bottom}(buffer);
    }
};
}
#+end_src
#+depends:image/square_crop :noweb image/crop

*** Resizing

My main use case for screen captures is to include them in compiled html or pdf documents or in the README, so I don't really need them at full resolution.
Furthermore, screen captures are managed by git and since I will make quite a few of them over the course of this project, resizing them will help to reduce their impact on this repository's size.

The header =stb_image_resize.h= from stb provices =stbir_resize_uint8=.
#+name: image/resize
#+begin_src cpp :minipage
namespace image {
struct resize {
    GLsizei width, height;

    template<class RenderBuffer> auto operator()(const RenderBuffer& buffer) const {
        RenderBuffer resized(width, height, buffer.channels);
        stbir_resize_uint8(
            buffer.data(), buffer.width, buffer.height, buffer.stride,
            resized.data(), resized.width, resized.height, resized.stride,
            buffer.channels
        );
        return resized;
    }
};
} // namespace image
#+end_src
#+depends:image/resize :noweb stb_image_resize

The handling of the =stb_image_resize= dependency is the same as with =stb_image_write=:
#+name: stb_image_resize
#+begin_src cpp :minipage
#define STB_IMAGE_RESIZE_IMPLEMENTATION
#include <stb/stb_image_resize.h>
#+end_src


** Image formats

The formats defined here correspond to the =Format= template argument of =render_buffer=.
Image formats are, along with the image transformations, the public-facing part of this screenshot system.

*** Writer

An image writer is merely a shortcut to grab pixels from a window, apply a transformation and save the transformed image.

#+name: image/format/writer
#+begin_src cpp :minipage
namespace image::format {
template<class Format, class Transformation>
struct writer_impl {
    Transformation transformation;
    // Not sure if this is proper perfect forwarding.
    writer_impl(Transformation&& t):
        transformation(std::forward<Transformation>(t))
    {}

    writer_impl()=default;

    template<class Source>
    void operator()(const Source& source, std::string_view destination) const {
        transformation(render_buffer<Format>(source)).write(destination);
    }
};
} // namespace image::format
#+end_src
#+depends:image/format/writer :noweb render_buffer :cpp utility string_view

*** PNG

#+name: image/format/png
#+begin_src cpp :minipage
namespace image::format {
struct png {
    template<class Transformation=identity> using writer = writer_impl<png, Transformation>;

    static constexpr GLsizei alignment = 4;

    static void write(const render_buffer<png>& buffer, std::string_view destination) {
        stbi_write_png(destination.data(), buffer.width, buffer.height,
                       buffer.channels, buffer.data(), buffer.stride);
    }
};
} // namespace image::format
#+end_src
#+depends:image/format/png :noweb identity image/format/writer render_buffer :cpp string_view

*** JPEG

Quality should be between 1 and 100.

#+name: image/format/jpeg
#+begin_src cpp :minipage
namespace image::format {
template<int Quality> struct jpeg {
    template<class Transformation=identity> using writer = writer_impl<jpeg, Transformation>;

    static constexpr GLsizei alignment = 1;

    static void write(const render_buffer<jpeg>& buffer, std::string_view destination) {
        stbi_write_jpg(
            destination.data(), buffer.width, buffer.height,
            buffer.channels, buffer.data(), Quality
        );
    }
};
} // namespace image::format
#+end_src
#+depends:image/format/jpeg :noweb identity image/format/writer render_buffer :cpp string_view

*** All formats

Every format available can be included with =image/format=.
#+depends:image/format :noweb image/format/jpeg image/format/png

*** Deduce format by file extension

=image::format::deduce= is not a proper file format since it only produces a writer that delegates to an actual format.

#+name: image/format/deduce
#+begin_src cpp :minipage
namespace image::format {
template<int JpegQuality, class Transformation>
struct deduce_writer {
    Transformation transformation;
    deduce_writer(Transformation&& t):
        transformation(std::forward<Transformation>(t))
    {}

    deduce_writer()=default;

    template<class Source>
    void operator()(const Source& source, std::string_view destination) const {
        if(destination.ends_with(".jpeg") || destination.ends_with(".jpg"))
            transformation(render_buffer<jpeg<JpegQuality>>(source)).write(destination);
        else
            transformation(render_buffer<png>(source)).write(destination);
    }
};

template<int JpegQuality> struct deduce {
    template<class Transformation=identity>
    using writer = deduce_writer<JpegQuality, Transformation>;
};
} // namespace image::format
#+end_src
#+depends:image/format/deduce :noweb render_buffer image/format :cpp string_view


** Lazy functions (=lazy_window= extension)

The helpers in this section make it a little less cumbersome to capture and save the desired frame.
The =gl_= prefix here stands for game loop.

#+name: gl_screen_nth
#+begin_src cpp :minipage
template<class Render, class ImageWriter>
void gl_screen_nth(
    const lazy_window& source, std::string_view destination,
    const ImageWriter& writer, Render render, std::size_t n
) {
    source.render_n(n, render);
    writer(source, destination);
    std::cout << "[[file:" << destination << "]]\n";
    source.game_loop(render);
    // source.render_n(20, render);
}
#+end_src
#+depends:gl_screen_nth :noweb lazy_window :cpp iostream string_view

Shortcuts to save only the first frame:
#+name: gl_screen_first
#+begin_src cpp :minipage
template<class Render, class ImageWriter> void gl_screen_first(
    const lazy_window& source, std::string_view destination,
    const ImageWriter& writer, Render render
) {gl_screen_nth(source, destination, writer, render, 1);}

// The default is to save the whole image losslessly.
template<class Render> void gl_screen_first(
    const lazy_window& source, std::string_view destination, Render render
) {gl_screen_first(source, destination, image::format::png::writer{}, render);}
#+end_src
#+depends:gl_screen_first :noweb gl_screen_nth image/format/png
