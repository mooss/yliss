#+title: C++ OpenGL graphics utilities
#+author: mooss

# No :wrap for this file because I can't disable it when I need to (uniform generation).
# `:exports both` does not work with pandoc when set at this level, it must be set manually in the code block header-args.
#+property: header-args :eval never :main no :exports both :noweb no-export
#+property: header-args:cpp+ :flags -std=c++20 -I include -ldl -lGL -lglfw src/glad.c

* Prelude :noexport:

** Inclusion

#+name: include
#+begin_src sh :var args="" :results output :wrap "src cpp" :eval no-export
./litlib/include.pl "window.org litlib/cpp.org graphics.org" "$args"
#+end_src

Specialised block for shaders (makes things slightly more readable):

#+name: shader
#+begin_src bash :var noweb="" :results output :wrap "src text" :eval no-export
./litlib/include.pl "graphics.org" ":noweb $noweb :c-string"
#+end_src


** Log the output of OpenGL commands

With the help of some pretty awesome black magic, =sed= can be used to replace OpenGL calls with a logging call via =LOG_AND_CALL=.

First, the following code block (from https://stackoverflow.com/a/66090390) must be executed:
#+begin_src emacs-lisp :eval no-export :results silent
(defun shell-command-on-buffer (command)
  ;; (interactive)
  (let ((line (line-number-at-pos)))
    ;; replace buffer with output of shell command
    (shell-command-on-region (point-min) (point-max) command nil t)
    ;; restore cursor position
    (goto-line line)
    (recenter-top-bottom)))
#+end_src

Then execute the following elisp command via =C-x C-e=:
(shell-command-on-buffer "sed -r 's| (gl[a-zA-Z]+[^(]+)\\(| LOG_AND_CALL(\\1, |'")
There is a space at the beginning of the regex to avoid matching initialisation lists.

Regex to transform logging calls back to plain opengl calls:
(shell-command-on-buffer "sed -r 's|LOG_AND_CALL\\((gl[a-zA-Z]+[^,]+), |\\1(|'")

I had to resort to sed because I'm not a fan of  Emacs' regexes.
To adapt the regexes above, remember that backslashes must be escaped because they are in an elisp string.

It should be possible to make the logging calls work for initialisation lists by adding a templated =log_and_call= function.


* OpenGL primitives

In this section are defined various OpenGL-related objects that let us draw things.
The building blocks defined here are relying on each other to do their work, this means that there is no obvious way to show their usefulness independantly.
Therefore, usage examples are gathered in the next section, after all has been defined.

I'm a bit lax with the dependencies declaration here because technically the blocks defined in this section are using OpenGL functions but they are not supposed to include those functions themselves.
What's implied here is that the user of the code blocks below knows what to expect and is using them in the proper context, that is to say after =window= or any other kind of OpenGL including mechanism has been included.

I tried to make as many things =const= as possible for those OpenGL primitives, this way once the objects are constructed, they are set in stone and annoying mistakes can be avoided.
Of course, those things will be "unconsted" when needed.

** Shader

A design principle used in shader-related classes is to build everything early and to fail immediately when an error occurs.
For =shader_base=, this principle manifests itself by an immediate compilation of the shader in the constructor followed by a call to =ensure_success= that will throw should a compilation error have occured.

Apparently, shaders are supposed to be deleted once they are linked, hence the custom desctuctor.
This means that =shader_base= objects should only be used as temporary objects and should perhaps not be copyable.
I will see at some point if this becomes a problem.
I don't want to ==delete= the copy constructor and assignment operator yet because I want to have a feature in the include script that does it for me at some point.
Having this slightly unfinished code is a useful reminder to eventually implement this feature.

#+name: shader_base
#+begin_src cpp
class shader_base {
  public:
    const GLuint id;

    ~shader_base() {
        glDeleteShader(id);
    }

  protected:
    shader_base(const char* source, int type):
        id(glCreateShader(type))
    {
        glShaderSource(id, 1, &source, nullptr);
        glCompileShader(id);
        ensure_success();
    }

  private:
    bool compiled() const {
        int success;
        glGetShaderiv(id, GL_COMPILE_STATUS, &success);
        return success;
    }

    std::string info_log() const {
        char buffer[512];
        glGetShaderInfoLog(id, 512, nullptr, buffer);
        return std::string(buffer, 512);
    }

    void ensure_success() {
        if(!compiled()) {
            throw std::runtime_error(info_log());
        }
    }
};
#+end_src
#+depends:shader_base :cpp string stdexcept

*** Vertex shader

#+name: vertex_shader
#+begin_src cpp
struct vertex_shader: public shader_base {
    vertex_shader(const char* source): shader_base(source, GL_VERTEX_SHADER) {}
};
#+end_src
#+depends:vertex_shader :noweb shader_base

*** Fragment shader

#+name: fragment_shader
#+begin_src cpp
struct fragment_shader: public shader_base {
    fragment_shader(const char* source): shader_base(source, GL_FRAGMENT_SHADER) {}
};
#+end_src
#+depends:fragment_shader :noweb shader_base

*** Shader program

A shader program links together a vertex shader and a fragment shader.
The build immediately, fail early principle is used here once again, this time for the linking step.

Rvalue references are used for the =vertex_shader= and =fragment_shader= parameters to enforce the idea that those are only temporary objects that should be destroyed as soon as they are used.

#+name: shader_program
#+begin_src cpp
class shader_program {
  public:
    shader_program(const vertex_shader&& vs, const fragment_shader&& fs):
        id(glCreateProgram())
    {
        glAttachShader(id, vs.id);
        glAttachShader(id, fs.id);
        glLinkProgram(id);
        ensure_success();
    }

    void use() const {
        glUseProgram(id);
    }

    const GLuint id;

  private:
    bool linked() const {
        int success;
        glGetProgramiv(id, GL_LINK_STATUS, &success);
        return success;
    }

    std::string info_log() const {
        char buffer[512];
        glGetProgramInfoLog(id, 512, nullptr, buffer);
        return std::string(buffer, 512);
    }

    void ensure_success() const {
        if(!linked()) {
            throw std::runtime_error(info_log());
        }
    }
};
#+end_src
#+depends:shader_program :noweb fragment_shader vertex_shader :cpp stdexcept


** Buffers

#+name: opengl_buffer
#+begin_src cpp
class opengl_buffer {
  protected:
    template<typename T>
    void send(const std::span<const T> data) const {
        glBindBuffer(target(), id_);
        glBufferData(target(), data.size() * sizeof(T), data.data(), GL_STATIC_DRAW);
    }

    opengl_buffer() : id_(generate()) {}

    virtual GLenum target() const=0;

  private:
    const GLuint id_;
    static GLuint generate() {
        GLuint id;
        glGenBuffers(1, &id);
        return id;
    }
};
#+end_src
#+depends:opengl_buffer :cpp span

*** VBO (Vertex Buffer Object)

VBOs are what is used to send vertices to the GPU.
#+name: VBO
#+begin_src cpp
class VBO: public opengl_buffer {
  public:
    VBO(): opengl_buffer() {}
    void send(const std::span<const GLfloat> data) const {
        opengl_buffer::send<GLfloat>(data);
    }

  protected:
    GLenum target() const override { return GL_ARRAY_BUFFER; }
};
#+end_src
#+depends:VBO :noweb opengl_buffer

*** EBO (Element Buffer Object)

EBOs are used to store indexes referring to vertices stored inside VBOs.
This way, vertices shared by several triangles can be send only once and used multiple times.

#+name: EBO
#+begin_src cpp
class EBO: public opengl_buffer {
  public:
    EBO(): opengl_buffer() {}
    void send(const std::span<const GLuint> data) const {
        opengl_buffer::send<GLuint>(data);
    }

  protected:
    GLenum target() const override { return GL_ELEMENT_ARRAY_BUFFER; }
};
#+end_src
#+depends:EBO :noweb opengl_buffer


** VAO (Vertex Array Object)

VAOs function is to remember various calls made on data held by VBOs.
Once a VAO is bound, it remembers state changes caused by various subsequent OpenGL calls.
Those states changes can be enacted again later by simply bounding the VAO, acting like a sort of shortcut.

#+name: VAO
#+begin_src cpp
class VAO {
  public:
    VAO(): id_(generate())
    {
        bind(); // For now.
    }

    void bind() const {
        glBindVertexArray(id_);
    }

  private:
    const GLuint id_;
    static GLuint generate() {
        GLuint id;
        glGenVertexArrays(1, &id);
        return id;
    }
};
#+end_src


** Vertices and indexes

The =vertices= and =indexes= classes are a wrapper around respectively =VBO= and =EBO=, adding a =draw= method.

Utilities common to =vertices= and =indexes=:
#+name: vertindex_common
#+begin_src cpp
namespace details {
void assert_multiple(unsigned int n, unsigned int divisor, const char* error_keyword) {
    if(n % divisor != 0) {
        // throw std::runtime_error(std::format(
        //     "Invalid number of {}, expected a multiple of {} but got {} % {} = {}.",
        //     error_keyword, divisor, n, divisor, n % divisor
        // ));
        // C++20's <format> header is not supported for now.
        throw std::runtime_error( std::string("Invalid number of ") + std::string(error_keyword)
                                  + std::string(": ") + std::to_string(n) );
    }
}
}
#+end_src
#+depends:vertindex_common :cpp string stdexcept

*** Vertices and their layout

=vertices= handles both the vertex data and its layout.
Vertices are sent straightaway to the GPU because I don't need anything else right now.

The layout is specified as a sequence of the sizes of the sub-vertices in the order of their apparition.
For example, if we want to send vertices composed of 8 floats, the first three being the position, the next two being some magic data and the last 3 being the color, the corresponding layout will be ={3, 2, 3}=.

#+name: vertices
#+begin_src cpp :noweb no-export
namespace details {
template<class T> struct glenum;
template<> struct glenum<GLfloat> { static const GLenum v = GL_FLOAT; };
}

template<typename T>
class vertices {
  public:
    vertices(const std::span<const T> content, const std::span<const std::size_t> layout):
        stride_(sum(layout)), count_(content.size() / stride_)
    {
        if(layout.size() == 0)
            throw std::runtime_error("Empty vertex layouts are illegal.");
        details::assert_multiple(content.size(), stride_, "vertices for the given layout");
        VBO vbo{}; vbo.send(content);
        <<Process vertices layout>>
    }

    // TODO: Think about glDeleteBuffers for this and also indexes, as well as glDeleteVertexArray for VAO.
    // Would probaly require move-only VAO and opengl_buffer to avoid multiple deletions of opengl resources.

    void draw() const { // Strictly VBO-based, no EBOs here.
        glDrawArrays(GL_TRIANGLES, 0, count_);
    }

  private:
    const GLsizei stride_;
    const GLsizei count_;
};
#+end_src
#+depends:vertices :noweb VBO vertindex_common sum

Vertex attributes are used to specify the layout of the data sent to the GPU.
The =layout= parameter is used to deduce the required values of each vertex attribute, with a caveat being that it is more restrictive than manually calling =glVertexAttribPointer=.

In particular, by virtue of how =layout= is constructed, the sub-vertices must have the same order in the layout as in the shader.
Going back to the previous example, it would not be possible to swap the position and the color without also inverting their order in the shader.

As promised, the layout is defined following the order of =layout=:
#+name: Process vertices layout
#+begin_src cpp
std::size_t offset = 0;
for(std::size_t i = 0; i < layout.size(); ++i) {
    glVertexAttribPointer(
        i, layout[i], details::glenum<T>::v, GL_FALSE,
        stride_ * sizeof(T), (void*) offset
    );
    offset += sizeof(T) * layout[i];
    glEnableVertexAttribArray(i);
}
#+end_src

The following helper function constructs =vertices= with both vertices and layout data being held inside a =std::vector=.
Using this allows to create the vectors in place with a braced syntax.

#+name: vec_vertices
#+begin_src cpp
template<typename T>
vertices<T> vec_vertices(const std::vector<T>& content, const std::vector<std::size_t>& layout) {
    return vertices<T>(content, layout);
}
#+end_src
#+depends:vec_vertices :cpp vector :noweb vertices

*** Indexes

I'm assuming for now that indexes will only be vectors of unsigned int.

#+name: indexes
#+begin_src cpp
class indexes {
  public:
    indexes(const std::vector<GLuint>& content):
        count_(content.size())
    {
        // Hardcoded 3 because only triangles are supported.
        details::assert_multiple(content.size(), 3, "indexes");
        EBO ebo{}; ebo.send(content);
    }

    void draw() {
        glDrawElements(GL_TRIANGLES, count_, GL_UNSIGNED_INT, 0);
    }

  private:
    const GLsizei count_;
};
#+end_src
#+depends:indexes :noweb EBO vertindex_common


** Uniform

Uniforms can be used to share data between the CPU and shader programs.
Lots of different data types can be shared this way, via =glUniform*= functions.
For example, =glUniform4f= can be used to send a vector of 4 floats.

The code block below uses LitLib's Pycgen and Pyogen to generate the necessary uniform variants.
It is a big code block but I think it's pretty easy to understand once the following bases are covered:
 - A =Pycgen= instance in the variable =cpp= stores the indentation level which can be increased when =cpp= is used as a context manager (via Python's =with= keyword).
   Once the context is exited (after the =with= block), the indentation level is automatically decreased and curly braces opened via =cpp.par= or =cpp.struct= are automatically closed.
 - Calling =cpp= prints its arguments with the current indentation level.
 - A simple coding scheme is used to encode the nature of the struct to generate.
   For example, the code =m4f= represents a matrix of $4 \times 4$ floats.
   Incidentally, this code is also used to name the generated struct.

#+begin_src python :eval no-export :results output raw :exports both
<<include(":noweb Pycgen Pyogen")>>

cpp = Pycgen()

type_dispatcher = {
    'f': 'GLfloat',
    'i': 'Glint',
    'ui': 'Gluint'
}

def varnames(cardinality):
    return ['x', 'y', 'z', 'w'][:cardinality]

def arglist(cardinality, typename):
    return '(' + ', '.join(
        type_dispatcher[typename] + ' ' + el
        for el in varnames(cardinality)
    ) + ')'

def decode(code):
    cardinality = int(code[0]); assert 0 < cardinality <= 4,\
        'Code `{}` has an invalid cardinality.'.format(code)
    typename = code[1:]; assert typename in type_dispatcher,\
        'Code `{}` has an invalid typename.'.format(code)
    return cardinality, typename

def location_ctor(name):
    cpp(
        'const GLint location;',
        name + '(const GLchar* name, const shader_program& program):',
        '    location(glGetUniformLocation(program.id, name))',
        '{}'
    )

def vec_uniform(code):
    cardinality, typename = decode(code)
    name='uniform_' + code
    with Pyogen('src cpp', name=name, depends=':noweb shader_program'):
        with cpp.struct(name):
            location_ctor(name)
            with cpp.par('void send' + arglist(cardinality, typename) + ' const'):
                cpp('glUniform4f(location, ' + ', '.join(varnames(cardinality)) + ');')

def mat_uniform(code):
    assert code[0] == 'm'
    cardinality, typename = decode(code[1:])
    name = 'uniform_' + code
    with Pyogen('src cpp', name=name, depends=':noweb shader_program :cpp cassert span'):
        with cpp.struct(name):
            location_ctor(name)
            with cpp.par('void send(const std::span<const GLfloat>& content) const'):
                cpp('assert(content.size() == ' + str(cardinality * cardinality) + ');')
                cpp('glUniformMatrix' + code[1:] + 'v(location, 1, GL_FALSE, content.data());')

def uniform(code):
    if code[0] == 'm':
        mat_uniform(code)
    else:
        vec_uniform(code)
    print()

print('*** Generated uniforms')
uniform('4f')
uniform('m4f')
#+end_src

#+RESULTS:
*** Generated uniforms
#+name: uniform_4f
#+begin_src cpp
struct uniform_4f {
    const GLint location;
    uniform_4f(const GLchar* name, const shader_program& program):
        location(glGetUniformLocation(program.id, name))
    {}
    void send(GLfloat x, GLfloat y, GLfloat z, GLfloat w) const {
        glUniform4f(location, x, y, z, w);
    }
};
#+end_src
#+depends:uniform_4f :noweb shader_program

#+name: uniform_m4f
#+begin_src cpp
struct uniform_m4f {
    const GLint location;
    uniform_m4f(const GLchar* name, const shader_program& program):
        location(glGetUniformLocation(program.id, name))
    {}
    void send(const std::span<const GLfloat>& content) const {
        assert(content.size() == 16);
        glUniformMatrix4fv(location, 1, GL_FALSE, content.data());
    }
};
#+end_src
#+depends:uniform_m4f :noweb shader_program :cpp cassert span

*** Reminder

A minor reminder concerning uniforms, they must be sent to the shader *after* the shader's first usage, so it's
#+begin_src cpp
program.use();
uniform.send(4, 8, 15, 16, 23, 42);
#+end_src
And not the other way around.


* OpenGL primitives examples

All the examples below are adapted from the excellent OpenGL tutorial at =learnopengl.com=.
A screenshot of the scene is saved and generated with each example to give an idea of what the result looks like.

** Drawing plain figures

The examples in the next two subsections are coming from the Hello-Triangle section of =learnopengl.com= (https://learnopengl.com/Getting-started/Hello-Triangle).
They are about using barebones fragment and vertex shaders to draw simple figures on the screen.

The next two code blocks are respectively the vertex and fragment shaders that will be used in this section.

#+name: basic_vs
#+begin_src glsl
#version 330 core
layout (location = 0) in vec3 position;

void main() {
    gl_Position = vec4(position.x, position.y, position.z, 1.0);
}
#+end_src

#+name: red_fs
#+begin_src glsl
#version 330 core
out vec4 color;

void main() {
    color = vec4(1.0f, 0.2f, 0.1f, 1.0f);
}
#+end_src

*** Drawing a triangle with =vertices=

There is not much to say here, this is the most minimalistic way I have to draw something.
It still requires some setup but it is as easy and convenient as I could make it.
The screen-capturing game loop function of [[window.org]] is put to good use to:
 - Save the capture.
 - Print the capture's filename as an org link.
 - Setup a game loop using the given lambda.

#+begin_src cpp :eval no-export :exports both
<<include(":noweb lazy_window gl_screen_first VAO shader_program vec_vertices")>>

int main(){
    const char *vs_str =
        <<shader("basic_vs")>>
        ;
    const char *fs_str =
        <<shader("red_fs")>>
        ;

    lazy_window lazy("Red triangle", 640u, 480u);
    shader_program basic_shader{vertex_shader(vs_str), fragment_shader(fs_str)};
    VAO triangle_vao{};
    auto triangle = vec_vertices<GLfloat>({
        -0.5, -0.5, 0.0,
         0.5, -0.5, 0.0,
         0.0,  0.5, 0.0
    }, {3});

    gl_screen_first(lazy, "images/screencaps/triangle_vertices.png", [&]{
        basic_shader.use();
        triangle_vao.bind();
        triangle.draw();
    });
    return 0;
}
#+end_src

#+RESULTS:
:results:
[[file:images/screencaps/triangle_vertices.png]]
:end:

*** Drawing a rectangle with =indexes=

Same thing as above, except we use =indexes= (and therefore =EBO=) as well as =vertices= to draw the two triangles forming a rectangle.

#+begin_src cpp :eval no-export :exports both
<<include(":noweb lazy_window gl_screen_first VAO shader_program vec_vertices indexes")>>

int main(){
    const char *vs_str =
        <<shader("basic_vs")>>
        ;
    const char *fs_str =
        <<shader("red_fs")>>
        ;

    lazy_window lazy("Red rectangle", 640u, 480u);
    shader_program basic_shader{vertex_shader(vs_str), fragment_shader(fs_str)};
    VAO rectangle_vao{};
    auto rectangle_vertices = vec_vertices<GLfloat>({
            0.5,  0.5, 0.0, // Top right.
            0.5, -0.5, 0.0, // Bottom right.
           -0.5, -0.5, 0.0, // Bottom left.
           -0.5,  0.5, 0.0  // Top left.
    }, {3});
    auto rectangle_indexes = indexes({
            0, 1, 3, // First triangle.
            1, 2, 3  // Second triangle.
    });

    gl_screen_first(lazy, "images/screencaps/rectangle_indexes.png", [&]{
        basic_shader.use();
        rectangle_vao.bind();
        rectangle_indexes.draw();
    });
    return 0;
  }
#+end_src

#+RESULTS:
:results:
[[file:images/screencaps/rectangle_indexes.png]]
:end:


** Uniform and sub-vertices

The next examples are adapted from the Shaders section (https://learnopengl.com/Getting-started/Shaders).

*** Drawing a color-shifting triangle with =uniform=

The following shader colors pixels according to the content of the uniform =color_cpu=:

#+name: color_shifting_fs
#+begin_src glsl
#version 330 core
out vec4 color_out;
uniform vec4 color_cpu;

void main() {
    color_out = color_cpu;
}
#+end_src

The OpenGL program below is based on the =vertices= drawing program above and uses a =uniform_4f= to update the value of =color_cpu= every time a frame is drawn.

#+begin_src cpp :eval no-export :exports both 
<<include(":noweb lazy_window gl_screen_first VAO shader_program vec_vertices uniform_4f :cpp cmath")>>

int main(){
    const char *vs_str =
        <<shader("basic_vs")>>
        ;
    const char *fs_str =
        <<shader("color_shifting_fs")>>
        ;

    lazy_window lazy("Triangle with shifting color", 640u, 480u);
    shader_program shifting_shader{vertex_shader(vs_str), fragment_shader(fs_str)};
    uniform_4f color_cpu("color_cpu", shifting_shader);
    VAO triangle_vao{};
    auto triangle = vec_vertices<GLfloat>({
        -0.5, -0.5, 0.0,
         0.5, -0.5, 0.0,
         0.0,  0.5, 0.0
    }, {3});

    gl_screen_first(lazy, "images/screencaps/shifting_color.png", [&]{
        float green = sin(glfwGetTime() * 3) * .07f + .75f;
        shifting_shader.use();
        color_cpu.send(.1, green, .8, 1.);
        triangle_vao.bind();
        triangle.draw();
    });
    return 0;
}
#+end_src

#+RESULTS:
:results:
[[file:images/screencaps/shifting_color.png]]
:end:

The screen capture is not very interesting here because it does not show the shifting colors but I still included it for good mesure.

*** Sending colors as sub-vertices

In this example, the colors of each vertex are sent to the GPU alongside their position.

Below are the dedicated vertex and fragment shaders.
Not much is done in them, it's mainly a question of receiving the position and color in the right location in the vertex shader and of transmitting it to the fragment shader.

#+name: color_as_attribute_vs
#+begin_src glsl
#version 330 core
layout (location = 0) in vec3 position;
layout (location = 1) in vec3 color_in;
out vec3 color_fs;

void main() {
    gl_Position = vec4(position, 1.);
    color_fs = color_in;
}
#+end_src

#+name: color_as_attribute_fs
#+begin_src glsl
#version 330 core
out vec4 color_out;
in vec3 color_fs;

void main() {
    color_out = vec4(color_fs, 1.);
}
#+end_src


The main difference with previous examples is that, to send the positions and the colors to their respective location, a vertex layout with two sub-vertices is used (={3, 3}=).
This means that two vertex attributes composed of 3 elements are defined next to each other.
The first one at location 0 is handled as the position in the vertex shader, whereas the second one at location 1 is handled as the color.

#+begin_src cpp :eval no-export :exports both
<<include(":noweb lazy_window gl_screen_first VAO shader_program vec_vertices")>>

int main(){
    const char *vs_str =
        <<shader("color_as_attribute_vs")>>
        ;
    const char *fs_str =
        <<shader("color_as_attribute_fs")>>
        ;

    lazy_window lazy("Triangle with color attributes", 640u, 480u);
    shader_program basic_shader{vertex_shader(vs_str), fragment_shader(fs_str)};
    VAO triangle_vao{};
    auto triangle = vec_vertices<GLfloat>(
        // Vertices:
        // Positions         // Colors
        {  0.5f, -0.5f, 0.0f,   1.0f, 0.0f, 0.0f,    // Bottom right.
          -0.5f, -0.5f, 0.0f,   0.0f, 1.0f, 0.0f,    // Bottom left.
           0.0f,  0.5f, 0.0f,   0.0f, 0.0f, 1.0f  }, // Top.
        // Vertices layout:
        {  3 /* Positions */,   3 /* Colors   */  }
    );

    gl_screen_first(lazy, "images/screencaps/color_as_attribute.png", [&]{
        basic_shader.use();
        triangle_vao.bind();
        triangle.draw();
    });
    return 0;
}
#+end_src

#+RESULTS:
:results:
[[file:images/screencaps/color_as_attribute.png]]
:end:


* Transformations

This section will tackle more involved OpenGL subjects, linked to the theme of transformations.
The first subsection will be about matrix transformation proper, that is to say the usage of matrix multiplication properties to transform (i.e. scale, rotate and translate) 3d objects.
The subsequent sections will build upon this foundation to introduce the model, view and projection matrices as well as cameras.
Once again, this section is based on the tutorial at [[https://learnopengl.com][learnopengl.com]], more specifically on the [[https://learnopengl.com/Getting-started/Transformations][Transformations]], [[https://learnopengl.com/Getting-started/Coordinate-Systems][Coordinate Systems]] and [[https://learnopengl.com/Getting-started/Camera][Camera]] chapters.

But first, in an attempt to normalise and disencumber the examples, the next code block prepares what is needed to draw a colorful cube.
This was adapted from some old code lying around so the order of indexes and vertices doesn't correspond to anything and perhaps doesn't make much sense.
Four colors are used for the cube vertices, with every opposite pair of vertices sharing the same color.

I seem to remember that there is some kind of convention in OpenGL about the order of vertices meaning something about the orientation of the normal but I can't be bother to find out so I'll come back to it later if I feel like it.
Anyway the cube renders in a colorful manner kind of reminiscent of the PS1 boot logo, as will be seen in the first example that uses it.

#+name: colorful_example
#+begin_src cpp
lazy_window lazy("Yliss colorful example", 640u, 480u);
shader_program colorful_shader{vertex_shader(vs_str), fragment_shader(fs_str)};
VAO colorful_vao{};
auto colorful_vertices = vec_vertices<GLfloat>({
     // Positions    // Colors
        .5,  .5,  .5,   1, 1, 0, // Yellow.
       -.5,  .5,  .5,   1, 0, 1, // Magenta.
        .5,  .5, -.5,   1, 1, 1, // White.
       -.5,  .5, -.5,   0, 1, 1, // Cyan.
        .5, -.5,  .5,   0, 1, 1, // Cyan.
       -.5, -.5,  .5,   1, 1, 1, // White.
       -.5, -.5, -.5,   1, 1, 0, // Yellow.
        .5, -.5, -.5,   1, 0, 1  // Magenta.
}, {3, 3});
auto colorful_indexes = indexes({
        3, 2, 6,
        2, 6, 7,
        6, 7, 4,
        7, 4, 2,
        4, 2, 0,
        2, 0, 3,
        0, 3, 1,
        3, 1, 6,
        1, 6, 5,
        6, 5, 4,
        5, 4, 1,
        4, 1, 0
});
#+end_src
#+depends:colorful_example :noweb lazy_window shader_program VAO vec_vertices indexes

** Matrix transformations

Matrices have the very useful property of being able to store and combine 3d transformations like scaling, rotating and translating.
GLM provides functions to perform those operations.
The class =transform= is nothing more than convenient syntactic sugar for those functions.

#+name: transform
#+begin_src cpp
class transform {
  public:
    glm::mat4 matrix_{1.f};

    transform& rotate_rad(float angle, const glm::vec3& axis) {
        return rotate_rad_impl(angle, glm::normalize(axis));
    }
    transform& rotate_deg(float angle, const glm::vec3& axis) {
        return rotate_rad_impl(glm::radians(angle), glm::normalize(axis));
    }

    transform& scale(const glm::vec3& magnitude) {
        matrix_ = glm::scale(matrix_, magnitude);
        return *this;
    }

    transform& translate(const glm::vec3& translation) {
        matrix_ = glm::translate(matrix_, translation);
        return *this;
    }

    operator auto() const {
        return to_span(matrix_);
    }

  private:
    transform& rotate_rad_impl(float angle, const glm::vec3& axis) {
        matrix_ = glm::rotate(matrix_, angle, axis);
        return *this;
    }
};
#+end_src
#+depends:transform :noweb to_span/glm :cpp glm/gtc/matrix_transform.hpp

Some remarks about =transform=:
 - The transformation methods return =*this= to make them chainable.
 - Having a public default-initialised =matrix_= makes it possible to manually initialise it to whatever we want, like this for example:
   #+begin_src cpp
glm::mat4 nonsensical_matrix{12.f};
transform nonsensical_transformation{nonsensical_matrix};
   #+end_src
   The trailing underscore is here to signify that even though this is a public field, it should not be modified.
 - Rotation axes are normalised, as recommended by GLM.
 - The conversion operator to =std::span= makes sending a transformation to the gpu a breeze.
\\

To experiment with transformations, this vertex shader transmits the input color it received to the fragment shader and applies a given transformation matrix to its original position:
#+name: colorattr_transform_vs
#+begin_src glsl
#version 330 core
layout (location = 0) in vec3 position;
layout (location = 1) in vec3 color_in;
out vec3 color_fs;
uniform mat4 transformation;

void main() {
    gl_Position = transformation * vec4(position, 1.0f);
    color_fs = color_in;
}
#+end_src

All is put together here by sending a custom transformation to the shader using =uniform_m4f= and =transform=.
#+begin_src cpp :eval no-export :exports both
const char *vs_str =
    <<shader("colorattr_transform_vs")>>
    ;
const char *fs_str =
    <<shader("color_as_attribute_fs")>>
    ;
<<include(":noweb colorful_example uniform_m4f transform gl_screen_first")>>

int main() {
    colorful_shader.use();
    uniform_m4f transform_u("transformation", colorful_shader);
    auto transformation = transform()
        .translate({-.3, 0, 0})
        .scale({.5, .5, 1})
        .rotate_deg(45, {0, 0, 1});
    transform_u.send(transformation);

    gl_screen_first(lazy, "images/screencaps/cube_transformation.png", [&]{
        colorful_shader.use();
        colorful_vao.bind();
        colorful_indexes.draw();
        // Keep rotating a bit every frame.
        transformation.rotate_rad(.015, {1, 1, 0});
        transform_u.send(transformation);
    });
}
#+end_src

#+RESULTS:
:results:
[[file:images/screencaps/cube_transformation.png]]
:end:

Note that the image above really is a cube.
I choosed to pick an angle where only a side was visible because it was pretty.
For an image with more of a 3d feeling, see the next example.


** Model, view and projection matrices

The model, view and projection matrices are transformation matrices each doing their own step to go from an isolated model to something ready to be drawn:
 - Model transforms local space (where the model is defined in isolation with the other assets) to world space (where all the assets are gathered).
   In other words, it places the model in the world.
 - View transforms world space to view space (where the scene is located, where the camera is looking at).
 - Projection transforms view space to clip space (where only what must be rendered is located, the rest being clipped off).
# TODO: Verify the above with other sources, I don't think I understood everything I needed.

The struct =transform_uniform= is a shortcut for a transformation matrix with its associated uniform.
#+name: transform_uniform
#+begin_src cpp
struct transform_uniform {
    transform transformation;
    uniform_m4f uniform;

    template<typename Transform>
    transform_uniform(Transform&& t, const std::string& name, const shader_program& shader):
        transformation(std::forward<Transform>(t)), uniform(name.c_str(), shader)
    {}

    void send() const {
        uniform.send(transformation);
    }
};
#+end_src
#+depends:transform_uniform :noweb transform uniform_m4f shader_program :cpp string

The three matrices are abstracted away in =movipr= (=mvp= was too short and =model_view_projection= was too long), whose very minimalist outline can be seen below.
Note that the model is the only matrix whose data is directly stored within =movipr=, the other matrices will be generated on demand.
#+name: movipr
#+begin_src cpp
struct movipr {
    transform_uniform model;
    uniform_m4f view;
    uniform_m4f projection;

    <<movipr/public>>
};
#+end_src
#+depends:movipr :noweb transform_uniform uniform_m4f shader_program mandatory to_span/glm :cpp string glm/ext/matrix_clip_space.hpp glm/trigonometric.hpp

*** Construction parameters

In an attempt to make =movipr= easy to use and concise (for the user), the designated keywords arguments pattern is used.
It is justified by the fact that reasonable default values can be defined for most parameters.
The keyword arguments are separated in two group, the first group is dedicated to the projection parameter (only the perspective projection is supported).
The only parameter without reasonably defined default values is the =aspect= ratio, hence why it is marked as =mandatory=.
#+begin_src cpp :noweb-ref movipr/public
struct perspective_projection {
    mandatory<float> aspect;
    float fov{45};
    float near{1};
    float far{100};
    auto make() const {
        return glm::perspective(glm::radians(fov), *aspect, near, far);
    }
};
perspective_projection projection_parameters;
#+end_src
# TODO: use shared_ptr for view and projection and make a "half duplicate" factory.

An instance of perspective projection can be constructed like shown below, and a construction attempt without a value for =aspect= will not compile.
#+begin_src cpp
perspective_projection params{.aspect=4./3., .fov=80};
#+end_src

The other construction parameters are the variable names for the model, view and projection uniforms.
#+begin_src cpp :noweb-ref movipr/public
struct variables {
    std::string model{"model"};
    std::string view{"view"};
    std::string projection{"projection"};
};
#+end_src

*** Constructors

The perfect forwarding used for =model= will be useful to define transformations in place using =transform='s translation, scaling and rotation methods.
Because those methods return references to =transform= but transformations matrices should be moved in other cases.
#+begin_src cpp :noweb-ref movipr/public
template<class Transform, class Data>
movipr(
    Transform&& _model, const Data& view_data, const shader_program& shader,
    const perspective_projection& proj, const variables& names
): model(std::forward<Transform>(_model), names.model, shader),
   view(names.view.c_str(), shader),
   projection(names.projection.c_str(), shader),
   projection_parameters(proj)
{
    shader.use();
    model.send();
    view.send(view_data);
    refresh_projection();
}
#+end_src

I had to make an additional constructor to use the default value for the variable names.
For some reason defining the last argument of the other constructor to src_cpp[]{const variables& names=variables()} didn't compile.
Perhaps I forgot something about C++ syntax but I thought it was valid.
#+begin_src cpp :noweb-ref movipr/public
template<class Transform, class Data>
movipr(
    Transform&& model, const Data& view_data, const shader_program& shader,
    const perspective_projection& proj
): movipr(std::forward<Transform>(model), view_data, shader, proj, variables{})
{}
#+end_src

*** Update

The projection matrix can be updated with =refresh_projection= after the projection parameters have been changed.
#+begin_src cpp :noweb-ref movipr/public
void refresh_projection() {
    projection.send(to_span(projection_parameters.make()));
}
#+end_src

*** Usage

The following vertex shader receives the model, view and projection matrices and applies them to the position:
#+name: model_view_projection_vs
#+begin_src glsl
#version 330 core
layout (location = 0) in vec3 position;
layout (location = 1) in vec3 color_in;
out vec3 color_fs;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

void main() {
    gl_Position = projection * view * model * vec4(position, 1.0f);
    color_fs = color_in;
}
#+end_src

Model, view and projection matrices can be defined via a =movipr=, thus rendering something that looks less like the squashed lozenge of the previous example and more like a cube viewed from a certain perspective.
A window size observer is also setup to update the projection's aspect ratio when the window is resized.
#+begin_src cpp :eval no-export :exports both
const char *vs_str =
    <<shader("model_view_projection_vs")>>
    ;
const char *fs_str =
    <<shader("color_as_attribute_fs")>>
    ;
<<include(":noweb colorful_example movipr transform gl_screen_first")>>

int main() {
    movipr viper(
        transform().translate({-.5, 0, 0})
                   .scale({.5, .5, .5})
                   .rotate_deg(45, {0, 0, 1})
                   .rotate_deg(270, {0, 1, 0})
                   .rotate_deg(90, {1, 0, 1}),
        transform().translate({0, 0, -2}),
        colorful_shader,
        {.aspect = lazy.aspect()}
    );

    auto size_sub = lazy.observe_size([&viper](auto const& size) {
        viper.projection_parameters.aspect = size.aspect();
        viper.refresh_projection();
    });

    gl_screen_first(lazy, "images/screencaps/cc_model_view_projection.png", [&]{
        colorful_shader.use();
        colorful_vao.bind();
        colorful_indexes.draw();
        // Keep rotating a bit every frame.
        viper.model.transformation.rotate_rad(-.015, {1, 0, 1});
        viper.model.send();
    });
}
#+end_src

#+RESULTS:
:results:
[[file:images/screencaps/cc_model_view_projection.png]]
:end:


** TODO Cameras


* GLM utils

** Conversion

This next code block converts GLM matrices and vectors to =std::span=.

I'm a bit confused about const qualifiers.
In particular I wonder if an additional set of =to_span= functions is needed to handle specifically =const span<const T>= and =span<const T>= or if this is already handled by the two functions below or if this is not even relevant.

#+name: to_span/glm
#+begin_src cpp
template<glm::length_t Col, glm::length_t Row, typename T, glm::qualifier Q>
const auto to_span(const glm::mat<Col, Row, T, Q>& container) {
    return std::span(glm::value_ptr(container), Col * Row);
}

template<glm::length_t Length, typename T, glm::qualifier Q>
const auto to_span(const glm::vec<Length, T, Q>& container) {
    return std::span(glm::value_ptr(container), Length);
}

// Same thing, without the const qualifiers.
template<glm::length_t Col, glm::length_t Row, typename T, glm::qualifier Q>
auto to_span(glm::mat<Col, Row, T, Q>& container) {
    return std::span(glm::value_ptr(container), Col * Row);
}

template<glm::length_t Length, typename T, glm::qualifier Q>
auto to_span(glm::vec<Length, T, Q>& container) {
    return std::span(glm::value_ptr(container), Length);
}
#+end_src
#+depends:to_span/glm :cpp span glm/gtc/type_ptr.hpp

Usage
#+begin_src cpp :eval no-export :flags -Wall -std=c++20 :noweb no-export
<<include(":noweb to_span/glm <<span print-function")>>
int main() {
    glm::mat4 identity(1.0f);
    glm::vec2 lo{4, 8};
    glm::vec4 st{15, 16, 23, 42};
    print{"Identity 4x4 matrix:", to_span(identity)};
    print{"lo st:", to_span(lo), to_span(st)};
}
#+end_src

#+RESULTS:
:results:
Identity 4x4 matrix: [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]
lo st: [4, 8] [15, 16, 23, 42]
:end:



** Printing

*** Matrices
The operator overload below can be used to print a GLM matrix.
It is built based on the knowledge that GLM matrices are column-major and that in such a representation, for a matrix with $C$ columns and $R$ rows, the element at column $c$ and row $r$ is located at the offset $R \times c + r$.
The rest is just formatting details to ensure that the separators are well placed.

#+name: <<glm/mat
#+begin_src cpp
template<glm::length_t Col, glm::length_t Row, typename T, glm::qualifier Q>
std::ostream& operator<<(std::ostream& os, const glm::mat<Col, Row, T, Q>& container) {
    size_t size = Col * Row;
    os << "[";
    if(size > 0) {
        auto data = glm::value_ptr(container);
        size_t row = 0;
        for(; row < Row - 1; ++row) {
            for(size_t column = 0; column < Col; ++column) {
                os << " " << *(data + Row * column + row) << ",";
            }
            os << "\n ";
        }

        // The last row is a special case since it does not end with a ",".
        row = Row - 1;
        for(size_t column = 0; column < Col -1; ++column) {
            os << " " << *(data + Row * column + row) << ",";
        }
        os << " " << *(data + size - 1) << " ";
    }
    os << "]";
    return os;
}
#+end_src
#+depends:<<glm/mat :cpp ostream glm/gtc/type_ptr.hpp

As can be seen in the usage example below, values are not aligned prettily but this will do for now.
#+begin_src cpp :eval no-export :flags -Wall -std=c++11 :noweb no-export :exports both :wrap "src text :minipage"
<<include(":noweb <<glm/mat :cpp iostream")>>
int main() {
    glm::mat4 identity(1.0f);
    std::cout << "Identity transformation:\n" << identity << "\n\n";
    auto downscale_half = glm::scale(identity, glm::vec3(0.5, 0.5, 0.5));
    std::cout << "Downscale half:\n" << downscale_half << "\n";
}
#+end_src

#+RESULTS:
#+begin_src text :minipage
Identity transformation:
[ 1, 0, 0, 0,
  0, 1, 0, 0,
  0, 0, 1, 0,
  0, 0, 0, 1 ]

Downscale half:
[ 0.5, 0, 0, 0,
  0, 0.5, 0, 0,
  0, 0, 0.5, 0,
  0, 0, 0, 1 ]
#+end_src

*** Vectors

Thankfully, printing vectors is much easier since the =ostream::<<= operator defined for span can be reused.

#+name: <<glm/vec
#+begin_src cpp
template<glm::length_t Length, typename T, glm::qualifier Q>
std::ostream& operator<<(std::ostream& os, const glm::vec<Length, T, Q>& container) {
    os << to_span(container);
    return os;
}
#+end_src
#+depends:<<glm/vec :noweb <<span to_span/glm :cpp ostream

Usage:
#+begin_src cpp :eval no-export :flags -Wall -std=c++20 :noweb no-export :exports both :wrap "src text"
<<include(":noweb <<glm/vec print-function")>>
int main() {
    glm::vec3 xy{1, 1, 0};
    print{"Raw:", xy};
    print{"Normalised:", glm::normalize(xy)};
    glm::vec2 lo{4, 8}; glm::vec4 st{15, 16, 23, 42};
    print{lo, st};
}
#+end_src

#+RESULTS:
#+begin_src text
Raw: [1, 1, 0]
Normalised: [0.707107, 0.707107, 0]
[4, 8] [15, 16, 23, 42]
#+end_src
